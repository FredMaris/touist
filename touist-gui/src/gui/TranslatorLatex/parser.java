
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package gui.TranslatorLatex;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\016\003\000\002\002\004\000\002\016" +
    "\003\000\002\016\004\000\002\016\004\000\002\016\003" +
    "\000\002\005\005\000\002\004\010\000\002\004\005\000" +
    "\002\004\007\000\002\004\003\000\002\004\003\000\002" +
    "\004\005\000\002\004\005\000\002\004\010\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\006\000" +
    "\002\004\005\000\002\004\005\000\002\004\004\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\003\000\002\004\003\000\002\004\006\000\002\004\003" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\004\000\002\004\004\000\002\004\003\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\004\000\002\004\005\000\002\004\005\000\002\004\006" +
    "\000\002\004\006\000\002\004\006\000\002\004\006\000" +
    "\002\004\004\000\002\004\005\000\002\004\007\000\002" +
    "\004\010\000\002\004\010\000\002\004\010\000\002\004" +
    "\014\000\002\004\014\000\002\004\014\000\002\004\010" +
    "\000\002\007\003\000\002\007\003\000\002\006\003\000" +
    "\002\006\003\000\002\010\003\000\002\010\005\000\002" +
    "\012\003\000\002\012\003\000\002\012\005\000\002\013" +
    "\012\000\002\013\010\000\002\017\003\000\002\017\006" +
    "\000\002\017\006\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\014\003\000\002\014\005\000\002" +
    "\015\003\000\002\015\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\074\003\033\010\017\015\011\016\024\017" +
    "\007\020\004\022\013\025\046\026\043\027\022\030\015" +
    "\033\016\034\032\035\027\036\025\052\044\056\012\060" +
    "\026\070\031\071\040\072\037\075\005\076\030\077\035" +
    "\100\034\101\045\102\036\103\042\104\014\001\002\000" +
    "\004\101\045\001\002\000\004\052\314\001\002\000\076" +
    "\002\001\003\033\010\017\015\011\016\024\017\007\020" +
    "\004\022\013\025\046\026\043\027\022\030\015\033\016" +
    "\034\032\035\027\036\025\052\044\056\012\060\026\070" +
    "\031\071\040\072\037\075\005\076\030\077\035\100\034" +
    "\101\045\102\036\103\042\104\014\001\002\000\004\101" +
    "\045\001\002\000\144\002\uffff\003\033\010\017\015\011" +
    "\016\024\017\007\020\004\021\061\022\013\023\055\024" +
    "\053\025\046\026\043\027\022\030\015\031\052\033\016" +
    "\034\032\035\027\036\025\040\056\041\062\042\073\043" +
    "\064\044\063\045\074\046\065\047\066\050\057\051\071" +
    "\052\044\054\070\055\054\056\267\057\067\060\026\065" +
    "\075\067\072\070\031\071\040\072\037\075\005\076\030" +
    "\077\035\100\034\101\045\102\036\103\042\104\014\001" +
    "\002\000\004\052\263\001\002\000\072\010\017\015\011" +
    "\016\024\017\007\020\004\022\013\025\046\026\043\027" +
    "\022\030\015\033\016\034\032\035\027\036\025\052\044" +
    "\056\012\060\026\070\031\071\040\072\037\075\005\076" +
    "\030\077\035\100\034\101\045\102\036\103\042\104\014" +
    "\001\002\000\072\010\017\015\011\016\024\017\007\020" +
    "\004\022\013\025\046\026\043\027\022\030\015\033\016" +
    "\034\032\035\027\036\025\052\044\056\012\060\026\070" +
    "\031\071\040\072\037\075\005\076\030\077\035\100\034" +
    "\101\045\102\036\103\042\104\014\001\002\000\170\002" +
    "\uffe2\003\uffe2\005\uffe2\010\uffe2\011\uffe2\012\uffe2\015\uffe2" +
    "\016\uffe2\017\uffe2\020\uffe2\021\131\022\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042" +
    "\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2" +
    "\051\uffe2\052\132\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057" +
    "\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2" +
    "\067\uffe2\070\uffe2\071\uffe2\072\uffe2\073\uffe2\075\uffe2\076" +
    "\uffe2\077\uffe2\100\uffe2\101\uffe2\102\uffe2\103\uffe2\104\uffe2" +
    "\001\002\000\004\052\256\001\002\000\170\002\uffc7\003" +
    "\uffc7\005\uffc7\010\uffc7\011\uffc7\012\uffc7\015\uffc7\016\uffc7" +
    "\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043" +
    "\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7" +
    "\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060" +
    "\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\067\uffc7" +
    "\070\uffc7\071\uffc7\072\uffc7\073\uffc7\075\uffc7\076\uffc7\077" +
    "\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7\104\uffc7\001\002" +
    "\000\072\010\017\015\011\016\024\017\007\020\004\022" +
    "\013\025\046\026\043\027\022\030\015\033\016\034\032" +
    "\035\027\036\025\052\044\056\012\060\026\070\031\071" +
    "\040\072\037\075\005\076\030\077\035\100\034\101\045" +
    "\102\036\103\042\104\014\001\002\000\170\002\uffdc\003" +
    "\uffdc\005\uffdc\010\uffdc\011\uffdc\012\uffdc\015\uffdc\016\uffdc" +
    "\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc" +
    "\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060" +
    "\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\067\uffdc" +
    "\070\uffdc\071\uffdc\072\uffdc\073\uffdc\075\uffdc\076\uffdc\077" +
    "\uffdc\100\uffdc\101\uffdc\102\uffdc\103\uffdc\104\uffdc\001\002" +
    "\000\004\002\250\001\002\000\004\052\245\001\002\000" +
    "\170\002\ufff7\003\ufff7\005\ufff7\010\ufff7\011\ufff7\012\ufff7" +
    "\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023" +
    "\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7" +
    "\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041" +
    "\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7" +
    "\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056" +
    "\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7" +
    "\065\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7\073\ufff7\075" +
    "\ufff7\076\ufff7\077\ufff7\100\ufff7\101\ufff7\102\ufff7\103\ufff7" +
    "\104\ufff7\001\002\000\004\052\242\001\002\000\170\002" +
    "\uffe4\003\uffe4\005\uffe4\010\uffe4\011\uffe4\012\uffe4\015\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\033\uffe4" +
    "\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042" +
    "\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4" +
    "\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057" +
    "\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4" +
    "\067\uffe4\070\uffe4\071\uffe4\072\uffe4\073\uffe4\075\uffe4\076" +
    "\uffe4\077\uffe4\100\uffe4\101\uffe4\102\uffe4\103\uffe4\104\uffe4" +
    "\001\002\000\074\010\017\015\011\016\024\017\007\020" +
    "\004\022\013\025\046\026\043\027\022\030\015\033\016" +
    "\034\032\035\027\036\025\052\044\056\012\060\026\061" +
    "\227\070\031\071\040\072\037\075\005\076\030\077\035" +
    "\100\034\101\045\102\036\103\042\104\224\001\002\000" +
    "\170\002\uffe5\003\uffe5\005\uffe5\010\uffe5\011\uffe5\012\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041" +
    "\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5" +
    "\050\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056" +
    "\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5" +
    "\065\uffe5\067\uffe5\070\uffe5\071\uffe5\072\uffe5\073\uffe5\075" +
    "\uffe5\076\uffe5\077\uffe5\100\uffe5\101\uffe5\102\uffe5\103\uffe5" +
    "\104\uffe5\001\002\000\004\052\211\001\002\000\004\052" +
    "\204\001\002\000\170\002\uffc6\003\uffc6\005\uffc6\010\uffc6" +
    "\011\uffc6\012\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021" +
    "\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6" +
    "\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054" +
    "\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6" +
    "\063\uffc6\064\uffc6\065\uffc6\067\uffc6\070\uffc6\071\uffc6\072" +
    "\uffc6\073\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6\101\uffc6" +
    "\102\uffc6\103\uffc6\104\uffc6\001\002\000\004\002\ufffc\001" +
    "\002\000\072\010\017\015\011\016\024\017\007\020\004" +
    "\022\013\025\046\026\043\027\022\030\015\033\016\034" +
    "\032\035\027\036\025\052\044\056\012\060\026\070\031" +
    "\071\040\072\037\075\005\076\030\077\035\100\034\101" +
    "\045\102\036\103\042\104\014\001\002\000\004\052\166" +
    "\001\002\000\170\002\uffc5\003\uffc5\005\uffc5\010\uffc5\011" +
    "\uffc5\012\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5" +
    "\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063" +
    "\uffc5\064\uffc5\065\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5" +
    "\073\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5\101\uffc5\102" +
    "\uffc5\103\uffc5\104\uffc5\001\002\000\004\052\161\001\002" +
    "\000\004\052\154\001\002\000\146\002\ufff6\003\ufff6\010" +
    "\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6" +
    "\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031" +
    "\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\152\040\ufff6" +
    "\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\047" +
    "\ufff6\050\ufff6\051\ufff6\052\ufff6\054\ufff6\055\ufff6\056\ufff6" +
    "\057\ufff6\060\ufff6\065\ufff6\067\ufff6\070\ufff6\071\ufff6\072" +
    "\ufff6\075\ufff6\076\ufff6\077\ufff6\100\ufff6\101\ufff6\102\ufff6" +
    "\103\ufff6\104\ufff6\001\002\000\170\002\uffc4\003\uffc4\005" +
    "\uffc4\010\uffc4\011\uffc4\012\uffc4\015\uffc4\016\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044" +
    "\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4" +
    "\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061" +
    "\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\067\uffc4\070\uffc4" +
    "\071\uffc4\072\uffc4\073\uffc4\075\uffc4\076\uffc4\077\uffc4\100" +
    "\uffc4\101\uffc4\102\uffc4\103\uffc4\104\uffc4\001\002\000\004" +
    "\052\145\001\002\000\072\010\017\015\011\016\024\017" +
    "\007\020\004\022\013\025\046\026\043\027\022\030\015" +
    "\033\016\034\032\035\027\036\025\052\044\056\012\060" +
    "\026\070\031\071\040\072\037\075\005\076\030\077\035" +
    "\100\034\101\045\102\036\103\042\104\014\001\002\000" +
    "\170\002\uffbc\003\uffbc\005\uffbc\010\uffbc\011\uffbc\012\uffbc" +
    "\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023" +
    "\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\052\125\053\uffbc\054\uffbc\055\uffbc\056" +
    "\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc" +
    "\065\uffbc\067\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc\075" +
    "\uffbc\076\uffbc\077\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc" +
    "\104\uffbc\001\002\000\004\052\047\001\002\000\072\010" +
    "\017\015\011\016\024\017\007\020\004\022\013\025\046" +
    "\026\043\027\022\030\015\033\016\034\032\035\027\036" +
    "\025\052\044\056\012\060\026\070\031\071\040\072\037" +
    "\075\005\076\030\077\035\100\034\101\045\102\036\103" +
    "\042\104\014\001\002\000\054\021\061\023\055\024\053" +
    "\031\052\040\056\041\062\042\073\043\064\044\063\045" +
    "\074\046\065\047\066\050\057\051\071\053\076\054\070" +
    "\055\054\056\060\057\067\065\075\067\072\001\002\000" +
    "\170\002\ufff6\003\ufff6\005\ufff6\010\ufff6\011\ufff6\012\ufff6" +
    "\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023" +
    "\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6" +
    "\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041" +
    "\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6" +
    "\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056" +
    "\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6" +
    "\065\ufff6\067\ufff6\070\ufff6\071\ufff6\072\ufff6\073\ufff6\075" +
    "\ufff6\076\ufff6\077\ufff6\100\ufff6\101\ufff6\102\ufff6\103\ufff6" +
    "\104\ufff6\001\002\000\072\010\017\015\011\016\024\017" +
    "\007\020\004\022\013\025\046\026\043\027\022\030\015" +
    "\033\016\034\032\035\027\036\025\052\044\056\012\060" +
    "\026\070\031\071\040\072\037\075\005\076\030\077\035" +
    "\100\034\101\045\102\036\103\042\104\014\001\002\000" +
    "\072\010\017\015\011\016\024\017\007\020\004\022\013" +
    "\025\046\026\043\027\022\030\015\033\016\034\032\035" +
    "\027\036\025\052\044\056\012\060\026\070\031\071\040" +
    "\072\037\075\005\076\030\077\035\100\034\101\045\102" +
    "\036\103\042\104\014\001\002\000\072\010\017\015\011" +
    "\016\024\017\007\020\004\022\013\025\046\026\043\027" +
    "\022\030\015\033\016\034\032\035\027\036\025\052\044" +
    "\056\012\060\026\070\031\071\040\072\037\075\005\076" +
    "\030\077\035\100\034\101\045\102\036\103\042\104\014" +
    "\001\002\000\072\010\017\015\011\016\024\017\007\020" +
    "\004\022\013\025\046\026\043\027\022\030\015\033\016" +
    "\034\032\035\027\036\025\052\044\056\012\060\026\070" +
    "\031\071\040\072\037\075\005\076\030\077\035\100\034" +
    "\101\045\102\036\103\042\104\014\001\002\000\072\010" +
    "\017\015\011\016\024\017\007\020\004\022\013\025\046" +
    "\026\043\027\022\030\015\033\016\034\032\035\027\036" +
    "\025\052\044\056\012\060\026\070\031\071\040\072\037" +
    "\075\005\076\030\077\035\100\034\101\045\102\036\103" +
    "\042\104\014\001\002\000\072\010\017\015\011\016\024" +
    "\017\007\020\004\022\013\025\046\026\043\027\022\030" +
    "\015\033\016\034\032\035\027\036\025\052\044\056\012" +
    "\060\026\070\031\071\040\072\037\075\005\076\030\077" +
    "\035\100\034\101\045\102\036\103\042\104\014\001\002" +
    "\000\072\010\017\015\011\016\024\017\007\020\004\022" +
    "\013\025\046\026\043\027\022\030\015\033\016\034\032" +
    "\035\027\036\025\052\044\056\012\060\026\070\031\071" +
    "\040\072\037\075\005\076\030\077\035\100\034\101\045" +
    "\102\036\103\042\104\014\001\002\000\072\010\017\015" +
    "\011\016\024\017\007\020\004\022\013\025\046\026\043" +
    "\027\022\030\015\033\016\034\032\035\027\036\025\052" +
    "\044\056\012\060\026\070\031\071\040\072\037\075\005" +
    "\076\030\077\035\100\034\101\045\102\036\103\042\104" +
    "\014\001\002\000\072\010\017\015\011\016\024\017\007" +
    "\020\004\022\013\025\046\026\043\027\022\030\015\033" +
    "\016\034\032\035\027\036\025\052\044\056\012\060\026" +
    "\070\031\071\040\072\037\075\005\076\030\077\035\100" +
    "\034\101\045\102\036\103\042\104\014\001\002\000\072" +
    "\010\017\015\011\016\024\017\007\020\004\022\013\025" +
    "\046\026\043\027\022\030\015\033\016\034\032\035\027" +
    "\036\025\052\044\056\012\060\026\070\031\071\040\072" +
    "\037\075\005\076\030\077\035\100\034\101\045\102\036" +
    "\103\042\104\014\001\002\000\072\010\017\015\011\016" +
    "\024\017\007\020\004\022\013\025\046\026\043\027\022" +
    "\030\015\033\016\034\032\035\027\036\025\052\044\056" +
    "\012\060\026\070\031\071\040\072\037\075\005\076\030" +
    "\077\035\100\034\101\045\102\036\103\042\104\014\001" +
    "\002\000\072\010\017\015\011\016\024\017\007\020\004" +
    "\022\013\025\046\026\043\027\022\030\015\033\016\034" +
    "\032\035\027\036\025\052\044\056\012\060\026\070\031" +
    "\071\040\072\037\075\005\076\030\077\035\100\034\101" +
    "\045\102\036\103\042\104\014\001\002\000\072\010\017" +
    "\015\011\016\024\017\007\020\004\022\013\025\046\026" +
    "\043\027\022\030\015\033\016\034\032\035\027\036\025" +
    "\052\044\056\012\060\026\070\031\071\040\072\037\075" +
    "\005\076\030\077\035\100\034\101\045\102\036\103\042" +
    "\104\014\001\002\000\072\010\017\015\011\016\024\017" +
    "\007\020\004\022\013\025\046\026\043\027\022\030\015" +
    "\033\016\034\032\035\027\036\025\052\044\056\012\060" +
    "\026\070\031\071\040\072\037\075\005\076\030\077\035" +
    "\100\034\101\045\102\036\103\042\104\014\001\002\000" +
    "\072\010\017\015\011\016\024\017\007\020\004\022\013" +
    "\025\046\026\043\027\022\030\015\033\016\034\032\035" +
    "\027\036\025\052\044\056\012\060\026\070\031\071\040" +
    "\072\037\075\005\076\030\077\035\100\034\101\045\102" +
    "\036\103\042\104\014\001\002\000\072\010\017\015\011" +
    "\016\024\017\007\020\004\022\013\025\046\026\043\027" +
    "\022\030\015\033\016\034\032\035\027\036\025\052\044" +
    "\056\012\060\026\070\031\071\040\072\037\075\005\076" +
    "\030\077\035\100\034\101\045\102\036\103\042\104\014" +
    "\001\002\000\004\052\102\001\002\000\072\010\017\015" +
    "\011\016\024\017\007\020\004\022\013\025\046\026\043" +
    "\027\022\030\015\033\016\034\032\035\027\036\025\052" +
    "\044\056\012\060\026\070\031\071\040\072\037\075\005" +
    "\076\030\077\035\100\034\101\045\102\036\103\042\104" +
    "\014\001\002\000\072\010\017\015\011\016\024\017\007" +
    "\020\004\022\013\025\046\026\043\027\022\030\015\033" +
    "\016\034\032\035\027\036\025\052\044\056\012\060\026" +
    "\070\031\071\040\072\037\075\005\076\030\077\035\100" +
    "\034\101\045\102\036\103\042\104\014\001\002\000\072" +
    "\010\017\015\011\016\024\017\007\020\004\022\013\025" +
    "\046\026\043\027\022\030\015\033\016\034\032\035\027" +
    "\036\025\052\044\056\012\060\026\070\031\071\040\072" +
    "\037\075\005\076\030\077\035\100\034\101\045\102\036" +
    "\103\042\104\014\001\002\000\170\002\uffec\003\uffec\005" +
    "\uffec\010\uffec\011\uffec\012\uffec\015\uffec\016\uffec\017\uffec" +
    "\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026" +
    "\uffec\027\uffec\030\uffec\031\uffec\033\uffec\034\uffec\035\uffec" +
    "\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044" +
    "\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec" +
    "\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061" +
    "\uffec\062\uffec\063\uffec\064\uffec\065\uffec\067\uffec\070\uffec" +
    "\071\uffec\072\uffec\073\uffec\075\uffec\076\uffec\077\uffec\100" +
    "\uffec\101\uffec\102\uffec\103\uffec\104\uffec\001\002\000\170" +
    "\002\uffe8\003\uffe8\005\uffe8\010\uffe8\011\uffe8\012\uffe8\015" +
    "\uffe8\016\uffe8\017\uffe8\020\uffe8\021\061\022\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\052\033" +
    "\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8" +
    "\042\073\043\064\044\063\045\074\046\065\047\066\050" +
    "\uffe8\051\uffe8\052\uffe8\053\uffe8\054\070\055\054\056\060" +
    "\057\067\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8\065" +
    "\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8\075\uffe8" +
    "\076\uffe8\077\uffe8\100\uffe8\101\uffe8\102\uffe8\103\uffe8\104" +
    "\uffe8\001\002\000\170\002\uffed\003\uffed\005\uffed\010\uffed" +
    "\011\uffed\012\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021" +
    "\061\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed" +
    "\030\uffed\031\052\033\uffed\034\uffed\035\uffed\036\uffed\037" +
    "\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed" +
    "\046\065\047\066\050\uffed\051\uffed\052\uffed\053\uffed\054" +
    "\070\055\054\056\060\057\067\060\uffed\061\uffed\062\uffed" +
    "\063\uffed\064\uffed\065\uffed\067\uffed\070\uffed\071\uffed\072" +
    "\uffed\073\uffed\075\uffed\076\uffed\077\uffed\100\uffed\101\uffed" +
    "\102\uffed\103\uffed\104\uffed\001\002\000\170\002\ufff0\003" +
    "\ufff0\005\ufff0\010\ufff0\011\ufff0\012\ufff0\015\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\021\061\022\ufff0\023\ufff0\024\ufff0\025" +
    "\ufff0\026\ufff0\027\ufff0\030\ufff0\031\052\033\ufff0\034\ufff0" +
    "\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043" +
    "\ufff0\044\063\045\074\046\065\047\066\050\ufff0\051\ufff0" +
    "\052\ufff0\053\ufff0\054\070\055\054\056\060\057\067\060" +
    "\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0\067\ufff0" +
    "\070\ufff0\071\ufff0\072\ufff0\073\ufff0\075\ufff0\076\ufff0\077" +
    "\ufff0\100\ufff0\101\ufff0\102\ufff0\103\ufff0\104\ufff0\001\002" +
    "\000\072\010\017\015\011\016\024\017\007\020\004\022" +
    "\013\025\046\026\043\027\022\030\015\033\016\034\032" +
    "\035\027\036\025\052\044\056\012\060\026\070\031\071" +
    "\040\072\037\075\005\076\030\077\035\100\034\101\045" +
    "\102\036\103\042\104\014\001\002\000\054\021\061\023" +
    "\055\024\053\031\052\040\056\041\062\042\073\043\064" +
    "\044\063\045\074\046\065\047\066\050\057\051\071\053" +
    "\104\054\070\055\054\056\060\057\067\065\075\067\072" +
    "\001\002\000\170\002\ufff8\003\ufff8\005\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8" +
    "\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030" +
    "\ufff8\031\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037\ufff8" +
    "\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046" +
    "\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8" +
    "\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063" +
    "\ufff8\064\ufff8\065\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8" +
    "\073\ufff8\075\ufff8\076\ufff8\077\ufff8\100\ufff8\101\ufff8\102" +
    "\ufff8\103\ufff8\104\ufff8\001\002\000\170\002\uffe6\003\uffe6" +
    "\005\uffe6\010\uffe6\011\uffe6\012\uffe6\015\uffe6\016\uffe6\017" +
    "\uffe6\020\uffe6\021\061\022\uffe6\023\055\024\053\025\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\031\052\033\uffe6\034\uffe6\035" +
    "\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\073\043\064" +
    "\044\063\045\074\046\065\047\066\050\uffe6\051\uffe6\052" +
    "\uffe6\053\uffe6\054\070\055\054\056\060\057\067\060\uffe6" +
    "\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065\075\067\uffe6\070" +
    "\uffe6\071\uffe6\072\uffe6\073\uffe6\075\uffe6\076\uffe6\077\uffe6" +
    "\100\uffe6\101\uffe6\102\uffe6\103\uffe6\104\uffe6\001\002\000" +
    "\170\002\uffdb\003\uffdb\005\uffdb\010\uffdb\011\uffdb\012\uffdb" +
    "\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\061\022\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041" +
    "\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\065\047\066" +
    "\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\054\056" +
    "\uffdb\057\067\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb" +
    "\065\uffdb\067\uffdb\070\uffdb\071\uffdb\072\uffdb\073\uffdb\075" +
    "\uffdb\076\uffdb\077\uffdb\100\uffdb\101\uffdb\102\uffdb\103\uffdb" +
    "\104\uffdb\001\002\000\170\002\uffd7\003\uffd7\005\uffd7\010" +
    "\uffd7\011\uffd7\012\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7" +
    "\021\061\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027" +
    "\uffd7\030\uffd7\031\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7" +
    "\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045" +
    "\uffd7\046\065\047\066\050\uffd7\051\uffd7\052\uffd7\053\uffd7" +
    "\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062" +
    "\uffd7\063\uffd7\064\uffd7\065\uffd7\067\uffd7\070\uffd7\071\uffd7" +
    "\072\uffd7\073\uffd7\075\uffd7\076\uffd7\077\uffd7\100\uffd7\101" +
    "\uffd7\102\uffd7\103\uffd7\104\uffd7\001\002\000\170\002\uffea" +
    "\003\uffea\005\uffea\010\uffea\011\uffea\012\uffea\015\uffea\016" +
    "\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\033\uffea\034" +
    "\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea" +
    "\043\uffea\044\uffea\045\uffea\046\065\047\uffea\050\uffea\051" +
    "\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea" +
    "\060\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea\067" +
    "\uffea\070\uffea\071\uffea\072\uffea\073\uffea\075\uffea\076\uffea" +
    "\077\uffea\100\uffea\101\uffea\102\uffea\103\uffea\104\uffea\001" +
    "\002\000\170\002\uffeb\003\uffeb\005\uffeb\010\uffeb\011\uffeb" +
    "\012\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040" +
    "\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb" +
    "\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055" +
    "\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb" +
    "\064\uffeb\065\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073" +
    "\uffeb\075\uffeb\076\uffeb\077\uffeb\100\uffeb\101\uffeb\102\uffeb" +
    "\103\uffeb\104\uffeb\001\002\000\170\002\uffef\003\uffef\005" +
    "\uffef\010\uffef\011\uffef\012\uffef\015\uffef\016\uffef\017\uffef" +
    "\020\uffef\021\061\022\uffef\023\uffef\024\uffef\025\uffef\026" +
    "\uffef\027\uffef\030\uffef\031\052\033\uffef\034\uffef\035\uffef" +
    "\036\uffef\037\uffef\040\uffef\041\uffef\042\073\043\uffef\044" +
    "\063\045\074\046\065\047\066\050\uffef\051\uffef\052\uffef" +
    "\053\uffef\054\070\055\054\056\060\057\067\060\uffef\061" +
    "\uffef\062\uffef\063\uffef\064\uffef\065\uffef\067\uffef\070\uffef" +
    "\071\uffef\072\uffef\073\uffef\075\uffef\076\uffef\077\uffef\100" +
    "\uffef\101\uffef\102\uffef\103\uffef\104\uffef\001\002\000\170" +
    "\002\uffee\003\uffee\005\uffee\010\uffee\011\uffee\012\uffee\015" +
    "\uffee\016\uffee\017\uffee\020\uffee\021\061\022\uffee\023\uffee" +
    "\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\052\033" +
    "\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee" +
    "\042\uffee\043\uffee\044\uffee\045\074\046\065\047\066\050" +
    "\uffee\051\uffee\052\uffee\053\uffee\054\070\055\054\056\060" +
    "\057\067\060\uffee\061\uffee\062\uffee\063\uffee\064\uffee\065" +
    "\uffee\067\uffee\070\uffee\071\uffee\072\uffee\073\uffee\075\uffee" +
    "\076\uffee\077\uffee\100\uffee\101\uffee\102\uffee\103\uffee\104" +
    "\uffee\001\002\000\170\002\ufff1\003\ufff1\005\ufff1\010\ufff1" +
    "\011\ufff1\012\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021" +
    "\061\022\ufff1\023\055\024\053\025\ufff1\026\ufff1\027\ufff1" +
    "\030\ufff1\031\052\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037" +
    "\ufff1\040\056\041\062\042\073\043\064\044\063\045\074" +
    "\046\065\047\066\050\057\051\071\052\ufff1\053\ufff1\054" +
    "\070\055\054\056\060\057\067\060\ufff1\061\ufff1\062\ufff1" +
    "\063\ufff1\064\ufff1\065\075\067\072\070\ufff1\071\ufff1\072" +
    "\ufff1\073\ufff1\075\ufff1\076\ufff1\077\ufff1\100\ufff1\101\ufff1" +
    "\102\ufff1\103\ufff1\104\ufff1\001\002\000\166\002\ufff5\003" +
    "\ufff5\005\ufff5\010\ufff5\011\ufff5\012\ufff5\015\ufff5\016\ufff5" +
    "\017\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026" +
    "\ufff5\027\ufff5\030\ufff5\031\ufff5\033\ufff5\034\ufff5\035\ufff5" +
    "\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044" +
    "\ufff5\045\ufff5\046\065\047\066\050\ufff5\051\ufff5\052\ufff5" +
    "\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061" +
    "\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\067\ufff5\070\ufff5" +
    "\071\ufff5\072\ufff5\073\ufff5\075\ufff5\076\ufff5\077\ufff5\100" +
    "\ufff5\101\ufff5\102\ufff5\103\ufff5\104\ufff5\001\002\000\170" +
    "\002\uffd9\003\uffd9\005\uffd9\010\uffd9\011\uffd9\012\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\021\061\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9" +
    "\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\065\047\066\050" +
    "\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\054\056\uffd9" +
    "\057\067\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065" +
    "\uffd9\067\uffd9\070\uffd9\071\uffd9\072\uffd9\073\uffd9\075\uffd9" +
    "\076\uffd9\077\uffd9\100\uffd9\101\uffd9\102\uffd9\103\uffd9\104" +
    "\uffd9\001\002\000\170\002\uffe7\003\uffe7\005\uffe7\010\uffe7" +
    "\011\uffe7\012\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021" +
    "\061\022\uffe7\023\055\024\053\025\uffe7\026\uffe7\027\uffe7" +
    "\030\uffe7\031\052\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037" +
    "\uffe7\040\uffe7\041\uffe7\042\073\043\064\044\063\045\074" +
    "\046\065\047\066\050\uffe7\051\071\052\uffe7\053\uffe7\054" +
    "\070\055\054\056\060\057\067\060\uffe7\061\uffe7\062\uffe7" +
    "\063\uffe7\064\uffe7\065\075\067\uffe7\070\uffe7\071\uffe7\072" +
    "\uffe7\073\uffe7\075\uffe7\076\uffe7\077\uffe7\100\uffe7\101\uffe7" +
    "\102\uffe7\103\uffe7\104\uffe7\001\002\000\170\002\ufff2\003" +
    "\ufff2\005\ufff2\010\ufff2\011\ufff2\012\ufff2\015\ufff2\016\ufff2" +
    "\017\ufff2\020\ufff2\021\061\022\ufff2\023\055\024\053\025" +
    "\ufff2\026\ufff2\027\ufff2\030\ufff2\031\052\033\ufff2\034\ufff2" +
    "\035\ufff2\036\ufff2\037\ufff2\040\056\041\062\042\073\043" +
    "\064\044\063\045\074\046\065\047\066\050\057\051\071" +
    "\052\ufff2\053\ufff2\054\070\055\054\056\060\057\067\060" +
    "\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\065\075\067\072" +
    "\070\ufff2\071\ufff2\072\ufff2\073\ufff2\075\ufff2\076\ufff2\077" +
    "\ufff2\100\ufff2\101\ufff2\102\ufff2\103\ufff2\104\ufff2\001\002" +
    "\000\170\002\uffe0\003\uffe0\005\uffe0\010\uffe0\011\uffe0\012" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\061\022\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031" +
    "\052\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0" +
    "\041\uffe0\042\073\043\064\044\063\045\074\046\065\047" +
    "\066\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\070\055\054" +
    "\056\060\057\067\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064" +
    "\uffe0\065\075\067\uffe0\070\uffe0\071\uffe0\072\uffe0\073\uffe0" +
    "\075\uffe0\076\uffe0\077\uffe0\100\uffe0\101\uffe0\102\uffe0\103" +
    "\uffe0\104\uffe0\001\002\000\170\002\uffda\003\uffda\005\uffda" +
    "\010\uffda\011\uffda\012\uffda\015\uffda\016\uffda\017\uffda\020" +
    "\uffda\021\061\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\031\uffda\033\uffda\034\uffda\035\uffda\036" +
    "\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda" +
    "\045\uffda\046\065\047\066\050\uffda\051\uffda\052\uffda\053" +
    "\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda" +
    "\062\uffda\063\uffda\064\uffda\065\uffda\067\uffda\070\uffda\071" +
    "\uffda\072\uffda\073\uffda\075\uffda\076\uffda\077\uffda\100\uffda" +
    "\101\uffda\102\uffda\103\uffda\104\uffda\001\002\000\170\002" +
    "\uffe1\003\uffe1\005\uffe1\010\uffe1\011\uffe1\012\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\020\uffe1\021\061\022\uffe1\023\055\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\052\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042" +
    "\073\043\064\044\063\045\074\046\065\047\066\050\uffe1" +
    "\051\uffe1\052\uffe1\053\uffe1\054\070\055\054\056\060\057" +
    "\067\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\075" +
    "\067\uffe1\070\uffe1\071\uffe1\072\uffe1\073\uffe1\075\uffe1\076" +
    "\uffe1\077\uffe1\100\uffe1\101\uffe1\102\uffe1\103\uffe1\104\uffe1" +
    "\001\002\000\170\002\uffd6\003\uffd6\005\uffd6\010\uffd6\011" +
    "\uffd6\012\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\061" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046" +
    "\065\047\066\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\070" +
    "\055\054\056\060\057\067\060\uffd6\061\uffd6\062\uffd6\063" +
    "\uffd6\064\uffd6\065\uffd6\067\uffd6\070\uffd6\071\uffd6\072\uffd6" +
    "\073\uffd6\075\uffd6\076\uffd6\077\uffd6\100\uffd6\101\uffd6\102" +
    "\uffd6\103\uffd6\104\uffd6\001\002\000\072\010\017\015\011" +
    "\016\024\017\007\020\004\022\013\025\046\026\043\027" +
    "\022\030\015\033\016\034\032\035\027\036\025\052\044" +
    "\056\012\060\026\070\031\071\040\072\037\075\005\076" +
    "\030\077\035\100\034\101\045\102\036\103\042\104\130" +
    "\001\002\000\056\021\061\023\055\024\053\031\052\040" +
    "\056\041\062\042\073\043\064\044\063\045\074\046\065" +
    "\047\066\050\057\051\071\053\uffc0\054\070\055\054\056" +
    "\060\057\067\063\141\065\075\067\072\001\002\000\004" +
    "\053\140\001\002\000\060\021\131\023\uffe2\024\uffe2\031" +
    "\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2" +
    "\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052\132\053\133\054" +
    "\uffe2\055\uffe2\056\uffe2\057\uffe2\063\uffe2\065\uffe2\067\uffe2" +
    "\001\002\000\072\010\017\015\011\016\024\017\007\020" +
    "\004\022\013\025\046\026\043\027\022\030\015\033\016" +
    "\034\032\035\027\036\025\052\044\056\012\060\026\070" +
    "\031\071\040\072\037\075\005\076\030\077\035\100\034" +
    "\101\045\102\036\103\042\104\014\001\002\000\072\010" +
    "\017\015\011\016\024\017\007\020\004\022\013\025\046" +
    "\026\043\027\022\030\015\033\016\034\032\035\027\036" +
    "\025\052\044\056\012\060\026\070\031\071\040\072\037" +
    "\075\005\076\030\077\035\100\034\101\045\102\036\103" +
    "\042\104\135\001\002\000\170\002\uffba\003\uffba\005\uffba" +
    "\010\uffba\011\uffba\012\uffba\015\uffba\016\uffba\017\uffba\020" +
    "\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba" +
    "\027\uffba\030\uffba\031\uffba\033\uffba\034\uffba\035\uffba\036" +
    "\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba" +
    "\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053" +
    "\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba\061\uffba" +
    "\062\uffba\063\uffba\064\uffba\065\uffba\067\uffba\070\uffba\071" +
    "\uffba\072\uffba\073\uffba\075\uffba\076\uffba\077\uffba\100\uffba" +
    "\101\uffba\102\uffba\103\uffba\104\uffba\001\002\000\004\053" +
    "\136\001\002\000\060\021\131\023\uffe2\024\uffe2\031\uffe2" +
    "\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046" +
    "\uffe2\047\uffe2\050\uffe2\051\uffe2\052\132\053\uffe2\054\uffe2" +
    "\055\uffe2\056\uffe2\057\uffe2\063\uffe2\065\uffe2\067\uffe2\001" +
    "\002\000\170\002\uffe3\003\uffe3\005\uffe3\010\uffe3\011\uffe3" +
    "\012\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3" +
    "\031\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040" +
    "\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046\uffe3" +
    "\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055" +
    "\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3" +
    "\064\uffe3\065\uffe3\067\uffe3\070\uffe3\071\uffe3\072\uffe3\073" +
    "\uffe3\075\uffe3\076\uffe3\077\uffe3\100\uffe3\101\uffe3\102\uffe3" +
    "\103\uffe3\104\uffe3\001\002\000\166\002\ufff4\003\ufff4\005" +
    "\ufff4\010\ufff4\011\ufff4\012\ufff4\015\ufff4\016\ufff4\017\ufff4" +
    "\020\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027" +
    "\ufff4\030\ufff4\031\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4" +
    "\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045" +
    "\ufff4\046\065\047\066\050\ufff4\051\ufff4\052\ufff4\053\ufff4" +
    "\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062" +
    "\ufff4\063\ufff4\064\ufff4\065\ufff4\067\ufff4\070\ufff4\071\ufff4" +
    "\072\ufff4\073\ufff4\075\ufff4\076\ufff4\077\ufff4\100\ufff4\101" +
    "\ufff4\102\ufff4\103\ufff4\104\ufff4\001\002\000\170\002\uffbb" +
    "\003\uffbb\005\uffbb\010\uffbb\011\uffbb\012\uffbb\015\uffbb\016" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb" +
    "\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb" +
    "\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\067" +
    "\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\075\uffbb\076\uffbb" +
    "\077\uffbb\100\uffbb\101\uffbb\102\uffbb\103\uffbb\104\uffbb\001" +
    "\002\000\072\010\017\015\011\016\024\017\007\020\004" +
    "\022\013\025\046\026\043\027\022\030\015\033\016\034" +
    "\032\035\027\036\025\052\044\056\012\060\026\070\031" +
    "\071\040\072\037\075\005\076\030\077\035\100\034\101" +
    "\045\102\036\103\042\104\135\001\002\000\004\053\uffbf" +
    "\001\002\000\054\021\061\023\055\024\053\031\052\040" +
    "\056\041\062\042\073\043\064\044\063\045\074\046\065" +
    "\047\066\050\057\051\071\053\144\054\070\055\054\056" +
    "\060\057\067\065\075\067\072\001\002\000\170\002\ufff9" +
    "\003\ufff9\005\ufff9\010\ufff9\011\ufff9\012\ufff9\015\ufff9\016" +
    "\ufff9\017\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9" +
    "\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\033\ufff9\034" +
    "\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9" +
    "\043\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051" +
    "\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9" +
    "\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\067" +
    "\ufff9\070\ufff9\071\ufff9\072\ufff9\073\ufff9\075\ufff9\076\ufff9" +
    "\077\ufff9\100\ufff9\101\ufff9\102\ufff9\103\ufff9\104\ufff9\001" +
    "\002\000\072\010\017\015\011\016\024\017\007\020\004" +
    "\022\013\025\046\026\043\027\022\030\015\033\016\034" +
    "\032\035\027\036\025\052\044\056\012\060\026\070\031" +
    "\071\040\072\037\075\005\076\030\077\035\100\034\101" +
    "\045\102\036\103\042\104\014\001\002\000\054\021\061" +
    "\023\055\024\053\031\052\040\056\041\062\042\073\043" +
    "\064\044\063\045\074\046\065\047\066\050\057\051\071" +
    "\054\070\055\054\056\060\057\067\063\147\065\075\067" +
    "\072\001\002\000\072\010\017\015\011\016\024\017\007" +
    "\020\004\022\013\025\046\026\043\027\022\030\015\033" +
    "\016\034\032\035\027\036\025\052\044\056\012\060\026" +
    "\070\031\071\040\072\037\075\005\076\030\077\035\100" +
    "\034\101\045\102\036\103\042\104\014\001\002\000\054" +
    "\021\061\023\055\024\053\031\052\040\056\041\062\042" +
    "\073\043\064\044\063\045\074\046\065\047\066\050\057" +
    "\051\071\053\151\054\070\055\054\056\060\057\067\065" +
    "\075\067\072\001\002\000\170\002\ufff3\003\ufff3\005\ufff3" +
    "\010\ufff3\011\ufff3\012\ufff3\015\ufff3\016\ufff3\017\ufff3\020" +
    "\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3" +
    "\027\ufff3\030\ufff3\031\ufff3\033\ufff3\034\ufff3\035\ufff3\036" +
    "\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\043\ufff3\044\ufff3" +
    "\045\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053" +
    "\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3" +
    "\062\ufff3\063\ufff3\064\ufff3\065\ufff3\067\ufff3\070\ufff3\071" +
    "\ufff3\072\ufff3\073\ufff3\075\ufff3\076\ufff3\077\ufff3\100\ufff3" +
    "\101\ufff3\102\ufff3\103\ufff3\104\ufff3\001\002\000\072\010" +
    "\017\015\011\016\024\017\007\020\004\022\013\025\046" +
    "\026\043\027\022\030\015\033\016\034\032\035\027\036" +
    "\025\052\044\056\012\060\026\070\031\071\040\072\037" +
    "\075\005\076\030\077\035\100\034\101\045\102\036\103" +
    "\042\104\014\001\002\000\144\002\ufffb\003\ufffb\010\ufffb" +
    "\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\061\022\ufffb\023" +
    "\055\024\053\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\052" +
    "\033\ufffb\034\ufffb\035\ufffb\036\ufffb\040\056\041\062\042" +
    "\073\043\064\044\063\045\074\046\065\047\066\050\057" +
    "\051\071\052\ufffb\054\070\055\054\056\ufffb\057\067\060" +
    "\ufffb\065\075\067\072\070\ufffb\071\ufffb\072\ufffb\075\ufffb" +
    "\076\ufffb\077\ufffb\100\ufffb\101\ufffb\102\ufffb\103\ufffb\104" +
    "\ufffb\001\002\000\072\010\017\015\011\016\024\017\007" +
    "\020\004\022\013\025\046\026\043\027\022\030\015\033" +
    "\016\034\032\035\027\036\025\052\044\056\012\060\026" +
    "\070\031\071\040\072\037\075\005\076\030\077\035\100" +
    "\034\101\045\102\036\103\042\104\014\001\002\000\054" +
    "\021\061\023\055\024\053\031\052\040\056\041\062\042" +
    "\073\043\064\044\063\045\074\046\065\047\066\050\057" +
    "\051\071\054\070\055\054\056\060\057\067\063\156\065" +
    "\075\067\072\001\002\000\072\010\017\015\011\016\024" +
    "\017\007\020\004\022\013\025\046\026\043\027\022\030" +
    "\015\033\016\034\032\035\027\036\025\052\044\056\012" +
    "\060\026\070\031\071\040\072\037\075\005\076\030\077" +
    "\035\100\034\101\045\102\036\103\042\104\014\001\002" +
    "\000\054\021\061\023\055\024\053\031\052\040\056\041" +
    "\062\042\073\043\064\044\063\045\074\046\065\047\066" +
    "\050\057\051\071\053\160\054\070\055\054\056\060\057" +
    "\067\065\075\067\072\001\002\000\170\002\uffcd\003\uffcd" +
    "\005\uffcd\010\uffcd\011\uffcd\012\uffcd\015\uffcd\016\uffcd\017" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\027\uffcd\030\uffcd\031\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052" +
    "\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd" +
    "\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\067\uffcd\070" +
    "\uffcd\071\uffcd\072\uffcd\073\uffcd\075\uffcd\076\uffcd\077\uffcd" +
    "\100\uffcd\101\uffcd\102\uffcd\103\uffcd\104\uffcd\001\002\000" +
    "\072\010\017\015\011\016\024\017\007\020\004\022\013" +
    "\025\046\026\043\027\022\030\015\033\016\034\032\035" +
    "\027\036\025\052\044\056\012\060\026\070\031\071\040" +
    "\072\037\075\005\076\030\077\035\100\034\101\045\102" +
    "\036\103\042\104\014\001\002\000\054\021\061\023\055" +
    "\024\053\031\052\040\056\041\062\042\073\043\064\044" +
    "\063\045\074\046\065\047\066\050\057\051\071\054\070" +
    "\055\054\056\060\057\067\063\163\065\075\067\072\001" +
    "\002\000\072\010\017\015\011\016\024\017\007\020\004" +
    "\022\013\025\046\026\043\027\022\030\015\033\016\034" +
    "\032\035\027\036\025\052\044\056\012\060\026\070\031" +
    "\071\040\072\037\075\005\076\030\077\035\100\034\101" +
    "\045\102\036\103\042\104\014\001\002\000\054\021\061" +
    "\023\055\024\053\031\052\040\056\041\062\042\073\043" +
    "\064\044\063\045\074\046\065\047\066\050\057\051\071" +
    "\053\165\054\070\055\054\056\060\057\067\065\075\067" +
    "\072\001\002\000\170\002\uffcc\003\uffcc\005\uffcc\010\uffcc" +
    "\011\uffcc\012\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021" +
    "\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037" +
    "\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc" +
    "\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054" +
    "\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc" +
    "\063\uffcc\064\uffcc\065\uffcc\067\uffcc\070\uffcc\071\uffcc\072" +
    "\uffcc\073\uffcc\075\uffcc\076\uffcc\077\uffcc\100\uffcc\101\uffcc" +
    "\102\uffcc\103\uffcc\104\uffcc\001\002\000\072\010\017\015" +
    "\011\016\024\017\007\020\004\022\013\025\046\026\043" +
    "\027\022\030\015\033\016\034\032\035\027\036\025\052" +
    "\044\056\012\060\026\070\031\071\040\072\037\075\005" +
    "\076\030\077\035\100\034\101\045\102\036\103\042\104" +
    "\014\001\002\000\054\021\061\023\055\024\053\031\052" +
    "\040\056\041\062\042\073\043\064\044\063\045\074\046" +
    "\065\047\066\050\057\051\071\054\070\055\054\056\060" +
    "\057\067\063\170\065\075\067\072\001\002\000\072\010" +
    "\017\015\011\016\024\017\007\020\004\022\013\025\046" +
    "\026\043\027\022\030\015\033\016\034\032\035\027\036" +
    "\025\052\044\056\012\060\026\070\031\071\040\072\037" +
    "\075\005\076\030\077\035\100\034\101\045\102\036\103" +
    "\042\104\014\001\002\000\054\021\061\023\055\024\053" +
    "\031\052\040\056\041\062\042\073\043\064\044\063\045" +
    "\074\046\065\047\066\050\057\051\071\054\070\055\054" +
    "\056\060\057\067\063\172\065\075\067\072\001\002\000" +
    "\072\010\017\015\011\016\024\017\007\020\004\022\013" +
    "\025\046\026\043\027\022\030\015\033\016\034\032\035" +
    "\027\036\025\052\044\056\012\060\026\070\031\071\040" +
    "\072\037\075\005\076\030\077\035\100\034\101\045\102" +
    "\036\103\042\104\014\001\002\000\054\021\061\023\055" +
    "\024\053\031\052\040\056\041\062\042\073\043\064\044" +
    "\063\045\074\046\065\047\066\050\057\051\071\054\070" +
    "\055\054\056\060\057\067\063\174\065\075\067\072\001" +
    "\002\000\072\010\017\015\011\016\024\017\007\020\004" +
    "\022\013\025\046\026\043\027\022\030\015\033\016\034" +
    "\032\035\027\036\025\052\044\056\012\060\026\070\031" +
    "\071\040\072\037\075\005\076\030\077\035\100\034\101" +
    "\045\102\036\103\042\104\014\001\002\000\054\021\061" +
    "\023\055\024\053\031\052\040\056\041\062\042\073\043" +
    "\064\044\063\045\074\046\065\047\066\050\057\051\071" +
    "\053\176\054\070\055\054\056\060\057\067\065\075\067" +
    "\072\001\002\000\170\002\uffc9\003\uffc9\005\uffc9\010\uffc9" +
    "\011\uffc9\012\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021" +
    "\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9" +
    "\030\uffc9\031\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037" +
    "\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054" +
    "\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9" +
    "\063\uffc9\064\uffc9\065\uffc9\067\uffc9\070\uffc9\071\uffc9\072" +
    "\uffc9\073\uffc9\075\uffc9\076\uffc9\077\uffc9\100\uffc9\101\uffc9" +
    "\102\uffc9\103\uffc9\104\uffc9\001\002\000\054\021\061\023" +
    "\055\024\053\031\052\037\200\040\056\041\062\042\073" +
    "\043\064\044\063\045\074\046\065\047\066\050\057\051" +
    "\071\054\070\055\054\056\060\057\067\065\075\067\072" +
    "\001\002\000\072\010\017\015\011\016\024\017\007\020" +
    "\004\022\013\025\046\026\043\027\022\030\015\033\016" +
    "\034\032\035\027\036\025\052\044\056\012\060\026\070" +
    "\031\071\040\072\037\075\005\076\030\077\035\100\034" +
    "\101\045\102\036\103\042\104\014\001\002\000\054\021" +
    "\061\023\055\024\053\031\052\040\056\041\062\042\073" +
    "\043\064\044\063\045\074\046\065\047\066\050\057\051" +
    "\071\054\070\055\054\056\060\057\067\064\202\065\075" +
    "\067\072\001\002\000\072\010\017\015\011\016\024\017" +
    "\007\020\004\022\013\025\046\026\043\027\022\030\015" +
    "\033\016\034\032\035\027\036\025\052\044\056\012\060" +
    "\026\070\031\071\040\072\037\075\005\076\030\077\035" +
    "\100\034\101\045\102\036\103\042\104\014\001\002\000" +
    "\170\002\uffc8\003\uffc8\005\uffc8\010\uffc8\011\uffc8\012\uffc8" +
    "\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023" +
    "\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8" +
    "\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041" +
    "\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8" +
    "\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056" +
    "\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8" +
    "\065\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8\073\uffc8\075" +
    "\uffc8\076\uffc8\077\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8" +
    "\104\uffc8\001\002\000\072\010\017\015\011\016\024\017" +
    "\007\020\004\022\013\025\046\026\043\027\022\030\015" +
    "\033\016\034\032\035\027\036\025\052\044\056\012\060" +
    "\026\070\031\071\040\072\037\075\005\076\030\077\035" +
    "\100\034\101\045\102\036\103\042\104\014\001\002\000" +
    "\054\021\061\023\055\024\053\031\052\040\056\041\062" +
    "\042\073\043\064\044\063\045\074\046\065\047\066\050" +
    "\057\051\071\054\070\055\054\056\060\057\067\063\206" +
    "\065\075\067\072\001\002\000\072\010\017\015\011\016" +
    "\024\017\007\020\004\022\013\025\046\026\043\027\022" +
    "\030\015\033\016\034\032\035\027\036\025\052\044\056" +
    "\012\060\026\070\031\071\040\072\037\075\005\076\030" +
    "\077\035\100\034\101\045\102\036\103\042\104\014\001" +
    "\002\000\054\021\061\023\055\024\053\031\052\040\056" +
    "\041\062\042\073\043\064\044\063\045\074\046\065\047" +
    "\066\050\057\051\071\053\210\054\070\055\054\056\060" +
    "\057\067\065\075\067\072\001\002\000\170\002\uffce\003" +
    "\uffce\005\uffce\010\uffce\011\uffce\012\uffce\015\uffce\016\uffce" +
    "\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025" +
    "\uffce\026\uffce\027\uffce\030\uffce\031\uffce\033\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043" +
    "\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce" +
    "\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060" +
    "\uffce\061\uffce\062\uffce\063\uffce\064\uffce\065\uffce\067\uffce" +
    "\070\uffce\071\uffce\072\uffce\073\uffce\075\uffce\076\uffce\077" +
    "\uffce\100\uffce\101\uffce\102\uffce\103\uffce\104\uffce\001\002" +
    "\000\072\010\017\015\011\016\024\017\007\020\004\022" +
    "\013\025\046\026\043\027\022\030\015\033\016\034\032" +
    "\035\027\036\025\052\044\056\012\060\026\070\031\071" +
    "\040\072\037\075\005\076\030\077\035\100\034\101\045" +
    "\102\036\103\042\104\014\001\002\000\054\021\061\023" +
    "\055\024\053\031\052\040\056\041\062\042\073\043\064" +
    "\044\063\045\074\046\065\047\066\050\057\051\071\054" +
    "\070\055\054\056\060\057\067\063\213\065\075\067\072" +
    "\001\002\000\072\010\017\015\011\016\024\017\007\020" +
    "\004\022\013\025\046\026\043\027\022\030\015\033\016" +
    "\034\032\035\027\036\025\052\044\056\012\060\026\070" +
    "\031\071\040\072\037\075\005\076\030\077\035\100\034" +
    "\101\045\102\036\103\042\104\014\001\002\000\054\021" +
    "\061\023\055\024\053\031\052\040\056\041\062\042\073" +
    "\043\064\044\063\045\074\046\065\047\066\050\057\051" +
    "\071\054\070\055\054\056\060\057\067\063\215\065\075" +
    "\067\072\001\002\000\072\010\017\015\011\016\024\017" +
    "\007\020\004\022\013\025\046\026\043\027\022\030\015" +
    "\033\016\034\032\035\027\036\025\052\044\056\012\060" +
    "\026\070\031\071\040\072\037\075\005\076\030\077\035" +
    "\100\034\101\045\102\036\103\042\104\014\001\002\000" +
    "\054\021\061\023\055\024\053\031\052\040\056\041\062" +
    "\042\073\043\064\044\063\045\074\046\065\047\066\050" +
    "\057\051\071\054\070\055\054\056\060\057\067\063\217" +
    "\065\075\067\072\001\002\000\072\010\017\015\011\016" +
    "\024\017\007\020\004\022\013\025\046\026\043\027\022" +
    "\030\015\033\016\034\032\035\027\036\025\052\044\056" +
    "\012\060\026\070\031\071\040\072\037\075\005\076\030" +
    "\077\035\100\034\101\045\102\036\103\042\104\014\001" +
    "\002\000\054\021\061\023\055\024\053\031\052\040\056" +
    "\041\062\042\073\043\064\044\063\045\074\046\065\047" +
    "\066\050\057\051\071\053\221\054\070\055\054\056\060" +
    "\057\067\065\075\067\072\001\002\000\170\002\uffca\003" +
    "\uffca\005\uffca\010\uffca\011\uffca\012\uffca\015\uffca\016\uffca" +
    "\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025" +
    "\uffca\026\uffca\027\uffca\030\uffca\031\uffca\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043" +
    "\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca" +
    "\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060" +
    "\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca\067\uffca" +
    "\070\uffca\071\uffca\072\uffca\073\uffca\075\uffca\076\uffca\077" +
    "\uffca\100\uffca\101\uffca\102\uffca\103\uffca\104\uffca\001\002" +
    "\000\006\061\uffc3\063\235\001\002\000\054\021\061\023" +
    "\055\024\053\031\052\040\056\041\062\042\073\043\064" +
    "\044\063\045\074\046\065\047\066\050\057\051\071\054" +
    "\070\055\054\056\060\057\067\062\232\065\075\067\072" +
    "\001\002\000\062\021\131\023\uffe2\024\uffe2\031\uffe2\040" +
    "\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2" +
    "\047\uffe2\050\uffe2\051\uffe2\052\132\054\uffe2\055\uffe2\056" +
    "\uffe2\057\uffe2\061\uffb9\062\uffe2\063\uffb9\065\uffe2\067\uffe2" +
    "\001\002\000\060\021\uffdc\023\uffdc\024\uffdc\031\uffdc\040" +
    "\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc" +
    "\047\uffdc\050\uffdc\051\uffdc\054\uffdc\055\uffdc\056\uffdc\057" +
    "\uffdc\061\uffb7\062\uffdc\063\uffb7\065\uffdc\067\uffdc\001\002" +
    "\000\060\021\ufff7\023\ufff7\024\ufff7\031\ufff7\040\ufff7\041" +
    "\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7" +
    "\050\ufff7\051\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\061" +
    "\uffb8\062\ufff7\063\uffb8\065\ufff7\067\ufff7\001\002\000\170" +
    "\002\uffd1\003\uffd1\005\uffd1\010\uffd1\011\uffd1\012\uffd1\015" +
    "\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1" +
    "\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1\050" +
    "\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1" +
    "\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065" +
    "\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1\073\uffd1\075\uffd1" +
    "\076\uffd1\077\uffd1\100\uffd1\101\uffd1\102\uffd1\103\uffd1\104" +
    "\uffd1\001\002\000\004\061\231\001\002\000\170\002\uffd0" +
    "\003\uffd0\005\uffd0\010\uffd0\011\uffd0\012\uffd0\015\uffd0\016" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\033\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0" +
    "\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051" +
    "\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0" +
    "\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\067" +
    "\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\075\uffd0\076\uffd0" +
    "\077\uffd0\100\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0\001" +
    "\002\000\072\010\017\015\011\016\024\017\007\020\004" +
    "\022\013\025\046\026\043\027\022\030\015\033\016\034" +
    "\032\035\027\036\025\052\044\056\012\060\026\070\031" +
    "\071\040\072\037\075\005\076\030\077\035\100\034\101" +
    "\045\102\036\103\042\104\014\001\002\000\054\021\061" +
    "\023\055\024\053\031\052\040\056\041\062\042\073\043" +
    "\064\044\063\045\074\046\065\047\066\050\057\051\071" +
    "\054\070\055\054\056\060\057\067\061\234\065\075\067" +
    "\072\001\002\000\170\002\uffcf\003\uffcf\005\uffcf\010\uffcf" +
    "\011\uffcf\012\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021" +
    "\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037" +
    "\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf" +
    "\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054" +
    "\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf" +
    "\063\uffcf\064\uffcf\065\uffcf\067\uffcf\070\uffcf\071\uffcf\072" +
    "\uffcf\073\uffcf\075\uffcf\076\uffcf\077\uffcf\100\uffcf\101\uffcf" +
    "\102\uffcf\103\uffcf\104\uffcf\001\002\000\014\033\016\034" +
    "\032\102\036\103\042\104\241\001\002\000\004\061\uffc2" +
    "\001\002\000\006\061\uffb8\063\uffb8\001\002\000\006\061" +
    "\uffb7\063\uffb7\001\002\000\006\061\uffb9\063\uffb9\001\002" +
    "\000\072\010\017\015\011\016\024\017\007\020\004\022" +
    "\013\025\046\026\043\027\022\030\015\033\016\034\032" +
    "\035\027\036\025\052\044\056\012\060\026\070\031\071" +
    "\040\072\037\075\005\076\030\077\035\100\034\101\045" +
    "\102\036\103\042\104\014\001\002\000\054\021\061\023" +
    "\055\024\053\031\052\040\056\041\062\042\073\043\064" +
    "\044\063\045\074\046\065\047\066\050\057\051\071\053" +
    "\244\054\070\055\054\056\060\057\067\065\075\067\072" +
    "\001\002\000\170\002\uffd3\003\uffd3\005\uffd3\010\uffd3\011" +
    "\uffd3\012\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046" +
    "\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3" +
    "\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063" +
    "\uffd3\064\uffd3\065\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3" +
    "\073\uffd3\075\uffd3\076\uffd3\077\uffd3\100\uffd3\101\uffd3\102" +
    "\uffd3\103\uffd3\104\uffd3\001\002\000\072\010\017\015\011" +
    "\016\024\017\007\020\004\022\013\025\046\026\043\027" +
    "\022\030\015\033\016\034\032\035\027\036\025\052\044" +
    "\056\012\060\026\070\031\071\040\072\037\075\005\076" +
    "\030\077\035\100\034\101\045\102\036\103\042\104\014" +
    "\001\002\000\054\021\061\023\055\024\053\031\052\040" +
    "\056\041\062\042\073\043\064\044\063\045\074\046\065" +
    "\047\066\050\057\051\071\053\247\054\070\055\054\056" +
    "\060\057\067\065\075\067\072\001\002\000\170\002\uffd5" +
    "\003\uffd5\005\uffd5\010\uffd5\011\uffd5\012\uffd5\015\uffd5\016" +
    "\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\033\uffd5\034" +
    "\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5" +
    "\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051" +
    "\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5" +
    "\060\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\067" +
    "\uffd5\070\uffd5\071\uffd5\072\uffd5\073\uffd5\075\uffd5\076\uffd5" +
    "\077\uffd5\100\uffd5\101\uffd5\102\uffd5\103\uffd5\104\uffd5\001" +
    "\002\000\004\002\000\001\002\000\054\011\252\021\061" +
    "\023\055\024\053\031\052\040\056\041\062\042\073\043" +
    "\064\044\063\045\074\046\065\047\066\050\057\051\071" +
    "\054\070\055\054\056\060\057\067\065\075\067\072\001" +
    "\002\000\072\010\017\015\011\016\024\017\007\020\004" +
    "\022\013\025\046\026\043\027\022\030\015\033\016\034" +
    "\032\035\027\036\025\052\044\056\012\060\026\070\031" +
    "\071\040\072\037\075\005\076\030\077\035\100\034\101" +
    "\045\102\036\103\042\104\014\001\002\000\054\012\254" +
    "\021\061\023\055\024\053\031\052\040\056\041\062\042" +
    "\073\043\064\044\063\045\074\046\065\047\066\050\057" +
    "\051\071\054\070\055\054\056\060\057\067\065\075\067" +
    "\072\001\002\000\072\010\017\015\011\016\024\017\007" +
    "\020\004\022\013\025\046\026\043\027\022\030\015\033" +
    "\016\034\032\035\027\036\025\052\044\056\012\060\026" +
    "\070\031\071\040\072\037\075\005\076\030\077\035\100" +
    "\034\101\045\102\036\103\042\104\014\001\002\000\170" +
    "\002\ufffa\003\ufffa\005\ufffa\010\ufffa\011\ufffa\012\ufffa\015" +
    "\ufffa\016\ufffa\017\ufffa\020\ufffa\021\061\022\ufffa\023\055" +
    "\024\053\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\052\033" +
    "\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\056\041\062" +
    "\042\073\043\064\044\063\045\074\046\065\047\066\050" +
    "\057\051\071\052\ufffa\053\ufffa\054\070\055\054\056\060" +
    "\057\067\060\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065" +
    "\075\067\072\070\ufffa\071\ufffa\072\ufffa\073\ufffa\075\ufffa" +
    "\076\ufffa\077\ufffa\100\ufffa\101\ufffa\102\ufffa\103\ufffa\104" +
    "\ufffa\001\002\000\072\010\017\015\011\016\024\017\007" +
    "\020\004\022\013\025\046\026\043\027\022\030\015\033" +
    "\016\034\032\035\027\036\025\052\044\056\012\060\026" +
    "\070\031\071\040\072\037\075\005\076\030\077\035\100" +
    "\034\101\045\102\036\103\042\104\014\001\002\000\054" +
    "\021\061\023\055\024\053\031\052\040\056\041\062\042" +
    "\073\043\064\044\063\045\074\046\065\047\066\050\057" +
    "\051\071\053\260\054\070\055\054\056\060\057\067\065" +
    "\075\067\072\001\002\000\170\002\uffd2\003\uffd2\005\uffd2" +
    "\010\uffd2\011\uffd2\012\uffd2\015\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\033\uffd2\034\uffd2\035\uffd2\036" +
    "\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2" +
    "\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053" +
    "\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2" +
    "\062\uffd2\063\uffd2\064\uffd2\065\uffd2\067\uffd2\070\uffd2\071" +
    "\uffd2\072\uffd2\073\uffd2\075\uffd2\076\uffd2\077\uffd2\100\uffd2" +
    "\101\uffd2\102\uffd2\103\uffd2\104\uffd2\001\002\000\170\002" +
    "\uffe9\003\uffe9\005\uffe9\010\uffe9\011\uffe9\012\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\020\uffe9\021\061\022\uffe9\023\055\024" +
    "\053\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\052\033\uffe9" +
    "\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\056\041\062\042" +
    "\073\043\064\044\063\045\074\046\065\047\066\050\057" +
    "\051\071\052\uffe9\053\uffe9\054\070\055\054\056\060\057" +
    "\067\060\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\065\075" +
    "\067\072\070\uffe9\071\uffe9\072\uffe9\073\uffe9\075\uffe9\076" +
    "\uffe9\077\uffe9\100\uffe9\101\uffe9\102\uffe9\103\uffe9\104\uffe9" +
    "\001\002\000\170\002\uffd8\003\uffd8\005\uffd8\010\uffd8\011" +
    "\uffd8\012\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\061" +
    "\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8" +
    "\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046" +
    "\065\047\066\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8" +
    "\055\054\056\uffd8\057\067\060\uffd8\061\uffd8\062\uffd8\063" +
    "\uffd8\064\uffd8\065\uffd8\067\uffd8\070\uffd8\071\uffd8\072\uffd8" +
    "\073\uffd8\075\uffd8\076\uffd8\077\uffd8\100\uffd8\101\uffd8\102" +
    "\uffd8\103\uffd8\104\uffd8\001\002\000\072\010\017\015\011" +
    "\016\024\017\007\020\004\022\013\025\046\026\043\027" +
    "\022\030\015\033\016\034\032\035\027\036\025\052\044" +
    "\056\012\060\026\070\031\071\040\072\037\075\005\076" +
    "\030\077\035\100\034\101\045\102\036\103\042\104\014" +
    "\001\002\000\054\021\061\023\055\024\053\031\052\040" +
    "\056\041\062\042\073\043\064\044\063\045\074\046\065" +
    "\047\066\050\057\051\071\053\265\054\070\055\054\056" +
    "\060\057\067\065\075\067\072\001\002\000\170\002\uffd4" +
    "\003\uffd4\005\uffd4\010\uffd4\011\uffd4\012\uffd4\015\uffd4\016" +
    "\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\033\uffd4\034" +
    "\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051" +
    "\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4" +
    "\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\067" +
    "\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4\075\uffd4\076\uffd4" +
    "\077\uffd4\100\uffd4\101\uffd4\102\uffd4\103\uffd4\104\uffd4\001" +
    "\002\000\004\002\ufffd\001\002\000\072\010\017\015\011" +
    "\016\024\017\007\020\004\022\013\025\046\026\043\027" +
    "\022\030\015\033\016\034\032\035\027\036\025\052\044" +
    "\056\012\060\026\070\031\071\040\072\037\075\005\076" +
    "\030\077\035\100\034\101\045\102\036\103\042\104\014" +
    "\001\002\000\144\002\uffd9\003\uffd9\010\uffd9\015\uffd9\016" +
    "\uffd9\017\uffd9\020\uffd9\021\061\022\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\033\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9" +
    "\044\uffd9\045\uffd9\046\065\047\066\050\uffd9\051\uffd9\052" +
    "\uffd9\054\uffd9\055\054\056\uffd9\057\067\060\uffd9\065\uffd9" +
    "\067\uffd9\070\uffd9\071\uffd9\072\uffd9\075\uffd9\076\uffd9\077" +
    "\uffd9\100\uffd9\101\uffd9\102\uffd9\103\uffd9\104\uffd9\001\002" +
    "\000\004\021\276\001\002\000\006\021\uffb6\063\274\001" +
    "\002\000\170\002\uffde\003\uffde\005\uffde\010\uffde\011\uffde" +
    "\012\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022" +
    "\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde" +
    "\031\uffde\033\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040" +
    "\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde" +
    "\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055" +
    "\uffde\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde" +
    "\064\uffde\065\uffde\067\uffde\070\uffde\071\uffde\072\uffde\073" +
    "\uffde\075\uffde\076\uffde\077\uffde\100\uffde\101\uffde\102\uffde" +
    "\103\uffde\104\uffde\001\002\000\004\101\045\001\002\000" +
    "\004\021\uffb5\001\002\000\072\010\017\015\011\016\024" +
    "\017\007\020\004\022\013\025\046\026\043\027\022\030" +
    "\015\033\016\034\032\035\027\036\025\052\044\056\012" +
    "\060\026\070\031\071\040\072\037\075\005\076\030\077" +
    "\035\100\034\101\045\102\036\103\042\104\014\001\002" +
    "\000\060\021\061\023\055\024\053\031\052\040\056\041" +
    "\062\042\073\043\064\044\063\045\074\046\065\047\066" +
    "\050\057\051\071\054\070\055\054\056\060\057\067\063" +
    "\311\064\uffb4\065\075\067\072\073\uffb4\001\002\000\006" +
    "\064\301\073\302\001\002\000\072\010\017\015\011\016" +
    "\024\017\007\020\004\022\013\025\046\026\043\027\022" +
    "\030\015\033\016\034\032\035\027\036\025\052\044\056" +
    "\012\060\026\070\031\071\040\072\037\075\005\076\030" +
    "\077\035\100\034\101\045\102\036\103\042\104\014\001" +
    "\002\000\072\010\017\015\011\016\024\017\007\020\004" +
    "\022\013\025\046\026\043\027\022\030\015\033\016\034" +
    "\032\035\027\036\025\052\044\056\012\060\026\070\031" +
    "\071\040\072\037\075\005\076\030\077\035\100\034\101" +
    "\045\102\036\103\042\104\014\001\002\000\054\021\061" +
    "\023\055\024\053\031\052\040\056\041\062\042\073\043" +
    "\064\044\063\045\074\046\065\047\066\050\057\051\071" +
    "\054\070\055\054\056\060\057\067\064\304\065\075\067" +
    "\072\001\002\000\072\010\017\015\011\016\024\017\007" +
    "\020\004\022\013\025\046\026\043\027\022\030\015\033" +
    "\016\034\032\035\027\036\025\052\044\056\012\060\026" +
    "\070\031\071\040\072\037\075\005\076\030\077\035\100" +
    "\034\101\045\102\036\103\042\104\014\001\002\000\054" +
    "\005\306\021\061\023\055\024\053\031\052\040\056\041" +
    "\062\042\073\043\064\044\063\045\074\046\065\047\066" +
    "\050\057\051\071\054\070\055\054\056\060\057\067\065" +
    "\075\067\072\001\002\000\170\002\uffbe\003\uffbe\005\uffbe" +
    "\010\uffbe\011\uffbe\012\uffbe\015\uffbe\016\uffbe\017\uffbe\020" +
    "\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe" +
    "\027\uffbe\030\uffbe\031\uffbe\033\uffbe\034\uffbe\035\uffbe\036" +
    "\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe" +
    "\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053" +
    "\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe" +
    "\062\uffbe\063\uffbe\064\uffbe\065\uffbe\067\uffbe\070\uffbe\071" +
    "\uffbe\072\uffbe\073\uffbe\075\uffbe\076\uffbe\077\uffbe\100\uffbe" +
    "\101\uffbe\102\uffbe\103\uffbe\104\uffbe\001\002\000\054\005" +
    "\310\021\061\023\055\024\053\031\052\040\056\041\062" +
    "\042\073\043\064\044\063\045\074\046\065\047\066\050" +
    "\057\051\071\054\070\055\054\056\060\057\067\065\075" +
    "\067\072\001\002\000\170\002\uffbd\003\uffbd\005\uffbd\010" +
    "\uffbd\011\uffbd\012\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027" +
    "\uffbd\030\uffbd\031\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd" +
    "\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045" +
    "\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd" +
    "\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062" +
    "\uffbd\063\uffbd\064\uffbd\065\uffbd\067\uffbd\070\uffbd\071\uffbd" +
    "\072\uffbd\073\uffbd\075\uffbd\076\uffbd\077\uffbd\100\uffbd\101" +
    "\uffbd\102\uffbd\103\uffbd\104\uffbd\001\002\000\072\010\017" +
    "\015\011\016\024\017\007\020\004\022\013\025\046\026" +
    "\043\027\022\030\015\033\016\034\032\035\027\036\025" +
    "\052\044\056\012\060\026\070\031\071\040\072\037\075" +
    "\005\076\030\077\035\100\034\101\045\102\036\103\042" +
    "\104\014\001\002\000\006\064\uffb3\073\uffb3\001\002\000" +
    "\004\002\ufffe\001\002\000\072\010\017\015\011\016\024" +
    "\017\007\020\004\022\013\025\046\026\043\027\022\030" +
    "\015\033\016\034\032\035\027\036\025\052\044\056\012" +
    "\060\026\070\031\071\040\072\037\075\005\076\030\077" +
    "\035\100\034\101\045\102\036\103\042\104\014\001\002" +
    "\000\054\021\061\023\055\024\053\031\052\040\056\041" +
    "\062\042\073\043\064\044\063\045\074\046\065\047\066" +
    "\050\057\051\071\054\070\055\054\056\060\057\067\063" +
    "\316\065\075\067\072\001\002\000\072\010\017\015\011" +
    "\016\024\017\007\020\004\022\013\025\046\026\043\027" +
    "\022\030\015\033\016\034\032\035\027\036\025\052\044" +
    "\056\012\060\026\070\031\071\040\072\037\075\005\076" +
    "\030\077\035\100\034\101\045\102\036\103\042\104\014" +
    "\001\002\000\054\021\061\023\055\024\053\031\052\040" +
    "\056\041\062\042\073\043\064\044\063\045\074\046\065" +
    "\047\066\050\057\051\071\054\070\055\054\056\060\057" +
    "\067\063\320\065\075\067\072\001\002\000\072\010\017" +
    "\015\011\016\024\017\007\020\004\022\013\025\046\026" +
    "\043\027\022\030\015\033\016\034\032\035\027\036\025" +
    "\052\044\056\012\060\026\070\031\071\040\072\037\075" +
    "\005\076\030\077\035\100\034\101\045\102\036\103\042" +
    "\104\014\001\002\000\054\021\061\023\055\024\053\031" +
    "\052\040\056\041\062\042\073\043\064\044\063\045\074" +
    "\046\065\047\066\050\057\051\071\054\070\055\054\056" +
    "\060\057\067\063\322\065\075\067\072\001\002\000\072" +
    "\010\017\015\011\016\024\017\007\020\004\022\013\025" +
    "\046\026\043\027\022\030\015\033\016\034\032\035\027" +
    "\036\025\052\044\056\012\060\026\070\031\071\040\072" +
    "\037\075\005\076\030\077\035\100\034\101\045\102\036" +
    "\103\042\104\014\001\002\000\054\021\061\023\055\024" +
    "\053\031\052\040\056\041\062\042\073\043\064\044\063" +
    "\045\074\046\065\047\066\050\057\051\071\053\324\054" +
    "\070\055\054\056\060\057\067\065\075\067\072\001\002" +
    "\000\170\002\uffcb\003\uffcb\005\uffcb\010\uffcb\011\uffcb\012" +
    "\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb" +
    "\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031" +
    "\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047" +
    "\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb" +
    "\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064" +
    "\uffcb\065\uffcb\067\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb" +
    "\075\uffcb\076\uffcb\077\uffcb\100\uffcb\101\uffcb\102\uffcb\103" +
    "\uffcb\104\uffcb\001\002\000\170\002\uffdd\003\uffdd\005\uffdd" +
    "\010\uffdd\011\uffdd\012\uffdd\015\uffdd\016\uffdd\017\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\033\uffdd\034\uffdd\035\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd" +
    "\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053" +
    "\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd" +
    "\062\uffdd\063\uffdd\064\uffdd\065\uffdd\067\uffdd\070\uffdd\071" +
    "\uffdd\072\uffdd\073\uffdd\075\uffdd\076\uffdd\077\uffdd\100\uffdd" +
    "\101\uffdd\102\uffdd\103\uffdd\104\uffdd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\323\000\016\004\007\005\005\006\017\007\022\016" +
    "\020\017\040\001\001\000\010\013\324\014\270\017\271" +
    "\001\001\000\002\001\001\000\016\004\007\005\005\006" +
    "\017\007\022\016\312\017\040\001\001\000\010\013\272" +
    "\014\270\017\271\001\001\000\016\004\007\005\005\006" +
    "\017\007\022\016\265\017\040\001\001\000\002\001\001" +
    "\000\012\004\261\006\017\007\022\017\050\001\001\000" +
    "\012\004\260\006\017\007\022\017\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\250\006\017\007\022\017\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\004\222\006\224" +
    "\007\225\010\227\011\221\017\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\176\006\017\007\022\017" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\142\006\017\007\022" +
    "\017\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\047\006\017\007\022\017\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\123\006\017\007" +
    "\022\017\050\001\001\000\012\004\122\006\017\007\022" +
    "\017\050\001\001\000\012\004\121\006\017\007\022\017" +
    "\050\001\001\000\012\004\120\006\017\007\022\017\050" +
    "\001\001\000\012\004\117\006\017\007\022\017\050\001" +
    "\001\000\012\004\116\006\017\007\022\017\050\001\001" +
    "\000\012\004\115\006\017\007\022\017\050\001\001\000" +
    "\012\004\114\006\017\007\022\017\050\001\001\000\012" +
    "\004\113\006\017\007\022\017\050\001\001\000\012\004" +
    "\112\006\017\007\022\017\050\001\001\000\012\004\111" +
    "\006\017\007\022\017\050\001\001\000\012\004\110\006" +
    "\017\007\022\017\050\001\001\000\012\004\107\006\017" +
    "\007\022\017\050\001\001\000\012\004\106\006\017\007" +
    "\022\017\050\001\001\000\012\004\105\006\017\007\022" +
    "\017\050\001\001\000\012\004\104\006\017\007\022\017" +
    "\050\001\001\000\002\001\001\000\012\004\100\006\017" +
    "\007\022\017\050\001\001\000\012\004\077\006\017\007" +
    "\022\017\050\001\001\000\012\004\076\006\017\007\022" +
    "\017\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\102\006\017" +
    "\007\022\017\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\125\006\017\007\022\012\126\017\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\136\006\017\007\022\017\050\001\001\000" +
    "\014\004\125\006\017\007\022\012\133\017\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\125\006\017\007\022\012\141\017\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\145\006\017\007\022\017\050\001\001\000\002\001" +
    "\001\000\012\004\147\006\017\007\022\017\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\152\006" +
    "\017\007\022\017\050\001\001\000\002\001\001\000\012" +
    "\004\154\006\017\007\022\017\050\001\001\000\002\001" +
    "\001\000\012\004\156\006\017\007\022\017\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\161\006" +
    "\017\007\022\017\050\001\001\000\002\001\001\000\012" +
    "\004\163\006\017\007\022\017\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\166\006\017\007\022" +
    "\017\050\001\001\000\002\001\001\000\012\004\170\006" +
    "\017\007\022\017\050\001\001\000\002\001\001\000\012" +
    "\004\172\006\017\007\022\017\050\001\001\000\002\001" +
    "\001\000\012\004\174\006\017\007\022\017\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\200\006\017\007\022\017\050\001\001\000\002" +
    "\001\001\000\012\004\202\006\017\007\022\017\050\001" +
    "\001\000\002\001\001\000\012\004\204\006\017\007\022" +
    "\017\050\001\001\000\002\001\001\000\012\004\206\006" +
    "\017\007\022\017\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\211\006\017\007\022\017\050\001" +
    "\001\000\002\001\001\000\012\004\213\006\017\007\022" +
    "\017\050\001\001\000\002\001\001\000\012\004\215\006" +
    "\017\007\022\017\050\001\001\000\002\001\001\000\012" +
    "\004\217\006\017\007\022\017\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\232\006\017\007\022\017\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\237\007\236\010\235" +
    "\011\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\242\006\017" +
    "\007\022\017\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\245\006\017\007\022\017\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\252\006\017\007\022\017\050" +
    "\001\001\000\002\001\001\000\012\004\254\006\017\007" +
    "\022\017\050\001\001\000\002\001\001\000\012\004\256" +
    "\006\017\007\022\017\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\263\006\017\007\022\017\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\267" +
    "\006\017\007\022\017\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\274\017\271\001\001\000\002\001\001\000\014\004" +
    "\276\006\017\007\022\015\277\017\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\306\006\017\007" +
    "\022\017\050\001\001\000\012\004\302\006\017\007\022" +
    "\017\050\001\001\000\002\001\001\000\012\004\304\006" +
    "\017\007\022\017\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\276\006\017\007\022\015\311\017\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\314\006\017\007" +
    "\022\017\050\001\001\000\002\001\001\000\012\004\316" +
    "\006\017\007\022\017\050\001\001\000\002\001\001\000" +
    "\012\004\320\006\017\007\022\017\050\001\001\000\002" +
    "\001\001\000\012\004\322\006\017\007\022\017\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= affect 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= expr 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= affect program 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(a+"\\\\"+p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= expr program 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(f+"\\\\"+p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program ::= error 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // affect ::= var AFFECT expr 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(v+"="+e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("affect",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= IF expr THEN expr ELSE expr 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("if\\;"+b+"\\;then\\;"+e1+"\\;else\\;"+e2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= LPAR expr RPAR 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("("+b+")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= expr DOT LPAR expr RPAR 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(s+".("+e+")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= bool 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= var 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr IN expr 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(n+" \\in "+s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= IDENTIFIER IN expr 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(i+" \\in "+s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= SUBSET LPAR expr COMMA expr RPAR 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(s1+" \\subset "+s2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr EQUAL expr 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(n1+" == "+n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr DIFFERENT expr 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(n1+" != "+n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr LESSER expr 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(n1+" < "+n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr LESSER_OR_EQUAL expr 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(n1+" <= "+n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr GREATER expr 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(n1+" > "+n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr GREATER_OR_EQUAL expr 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(n1+" >= "+n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= EMPTY LPAR expr RPAR 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("empty("+s+")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr BOOL_AND expr 
            {
              String RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(b1+" \\&\\& "+b2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr BOOL_OR expr 
            {
              String RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(b1+" || "+b2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= NOT expr 
            {
              String RESULT =null;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String( "\\neg "+b2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr XOR expr 
            {
              String RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(b1+" \\oplus "+b2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr IMPLIQUE expr 
            {
              String RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(b1+" \\Rightarrow "+b2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr EQUIV expr 
            {
              String RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(b1+" \\Leftrightarrow "+b2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= TOP 
            {
              String RESULT =null;
		 RESULT = new String("\\top");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= BOT 
            {
              String RESULT =null;
		 RESULT = new String("\\bot");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= IDENTIFIER LPAR term_option RPAR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(i+"("+t+")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr AND expr 
            {
              String RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(c1+" \\wedge "+c2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr OR expr 
            {
              String RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(c1+" \\vee "+c2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr XOR expr 
            {
              String RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(c1+" \\oplus "+c2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= BIGAND big_body 
            {
              String RESULT =null;
		int bbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String bb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("\\bigwedge"+bb);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= BIGOR big_body 
            {
              String RESULT =null;
		int bbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String bb = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("\\bigvee "+bb);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= nb 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr ADD expr 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(n1+"+"+n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= expr MULTIPLY expr 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(n1+"*"+n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= expr SUBSTRACT expr 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(n1+"-"+n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= SUBSTRACT expr 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("-"+n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= expr DIVIDE expr 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(n1+"/"+n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr MOD expr 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(n1+" \\% "+n2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= CARD LPAR expr RPAR 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("card("+s+")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= INT LPAR expr RPAR 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("int("+n+")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= FLOAT LPAR expr RPAR 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("float("+n+")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= SQRT LPAR expr RPAR 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("\\sqrt{"+n+"}");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= LCRO RCRO 
            {
              String RESULT =null;
		 RESULT = new String("[]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= LCRO set_decl RCRO 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("["+s+"]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= LCRO expr DODOT expr RCRO 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("["+n1+".."+n2+"]");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= UNION LPAR expr COMMA expr RPAR 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(s1+"\\cup"+s2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= INTER LPAR expr COMMA expr RPAR 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(s1+"\\cap"+s2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= DIFF LPAR expr COMMA expr RPAR 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(s1+"\\setminus"+s2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= ATLEAST LPAR expr COMMA expr COMMA expr COMMA expr RPAR 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("(\\geqslant_{"+s2+" \\in "+s3+"}^{"+s1+"}"+s4+")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= EXACT LPAR expr COMMA expr COMMA expr COMMA expr RPAR 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("(=_{"+s2+" \\in "+s3+"}^{"+s1+"}"+s4+")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= ATMOST LPAR expr COMMA expr COMMA expr COMMA expr RPAR 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("(\\leqslant_{"+s2+" \\in "+s3+"}^{"+s1+"}"+s4+")");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= LET expr AFFECT expr TWODOT expr 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(s1+"="+s2+"\\\\"+s3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // bool ::= TRUE 
            {
              String RESULT =null;
		 RESULT = new String("True");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // bool ::= FALSE 
            {
              String RESULT =null;
		 RESULT = new String("False");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // nb ::= INTEGER 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nb",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // nb ::= DOUBLENUMBER 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nb",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // set_decl ::= atom 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_decl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // set_decl ::= atom COMMA set_decl 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(a+","+s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_decl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // term_option ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_option",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // term_option ::= expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_option",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // term_option ::= expr COMMA term_option 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(e+","+t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term_option",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // big_body ::= var_list IN set_list WHEN expr TWODOT expr END 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("\\limits_{\\substack{"+v+"\\in"+s+"\\\\"+ b+"}}"+e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("big_body",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // big_body ::= var_list IN set_list TWODOT expr END 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("\\limits_{"+v+"\\in"+s+"}"+e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("big_body",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // var ::= VAR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("\\textbf{"+v+"}");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // var ::= VAR LPAR term_option RPAR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("\\textbf{"+v+"}("+t+")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // var ::= VAR LPAR IDENTIFIER RPAR 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("\\textbf{"+v+"}("+i+")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // atom ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // atom ::= bool 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // atom ::= nb 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atom",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // var_list ::= var 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(v);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // var_list ::= var COMMA var_list 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String vl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(v+","+vl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // set_list ::= expr 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // set_list ::= expr COMMA set_list 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new String(s+","+sl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
