(* Warning: the build must have been made in bytecode mode. To force
 * bytecode over native code, use the following:
 *     ./configure --override is_native false
 *)

#directory "_build/src";;
#directory "_build/src/lib";;
#directory "_build/src/lib/qbf";;
#directory "_build/src/lib/yices2";;

#require "menhirLib";;
#require "minisat";;
#require "str";;
#require "fileutils";;
#require "OUnit";;
#require "qbf";;

(* The order of the loads is important *)
#load "touistErr.cmo";;
#load "touistTypes.cmo";;
#load "touistPprint.cmo";;
#load "touistParserMsgs.cmo";;
#load "touistLexer.cmo";;
#load "touistParser.cmo";;
#load "touistParserReport.cmo";;
#load "touistParse.cmo";;
#load "touistEval.cmo";;
#load "touistVersion.cmo";;
#load "touistCnf.cmo";;
#load "touistSatSolve.cmo";;
#load "touistSmt.cmo";;
#load "touistLatex.cmo";;
#load "touistQbf.cmo";;


(* From 'utop', you can test small pieces of your code. For example,
   I have been trying my ModelSet thing:

   open Minisat.Lit
   open Minisat
   open Dimacs
   open ModelSet

   let m1 = ModelSet.(empty |> add [(1,0); (2,0); (2,0); (4,0)]);;
   ModelSet.elements m1;;

   let m2 = ModelSet.(empty |> add [(1,1); (2,0); (2,0); (4,0)]);;
   ModelSet.elements m2;;

   compare m1 m1;;

   let m2 = ModelSet.(empty |> add [(1,1); (2,0); (2,0); (4,0)]
                      |> add [(1,0); (2,0); (2,0); (4,0)]);;
   ModelSet.elements m2;;
*)
