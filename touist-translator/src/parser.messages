# Notes by MaÃ«l:
# We can use the tokens $0, $1, $2... that will be replaced by the i-th last
# token that has been read. $0 will typically show the token that has been read
# right before an error occurred.
# Example:
# The dot is where we are stopped. Here, the parser didn't expect to read "end".
# NOTE: I modified the [element checkpoint i] to display the failing token in $0,
#       and the following tokens are accessible via $1, $2...
# Here is what the $i tokens contain:
#
#     begin formula atleast  (   1   , [a] . end  formula
#                               $3  $2  $1    $0
#

# ------------------------------------------------------------------------------
prog: BEGIN FORMULA BIGOR VAR COMMA XOR 
##
## Ends in an error in state: 147.
##
## separated_nonempty_list(COMMA,VAR) -> VAR COMMA . separated_nonempty_list(COMMA,VAR) [ IN ]
##
## The known suffix of the stack is as follows:
## VAR COMMA 
##

Ill-formed use of 'exact' statement.
An expression was expected after $1.

prog: BEGIN FORMULA ATLEAST LPAREN VAR WHEN 
##
## Ends in an error in state: 91.
##
## exp -> LPAREN exp . RPAREN [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . ADD exp [ XOR SUB RPAREN OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . SUB exp [ XOR SUB RPAREN OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . MUL exp [ XOR SUB RPAREN OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . DIV exp [ XOR SUB RPAREN OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . MOD exp [ XOR SUB RPAREN OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . AND exp [ XOR SUB RPAREN OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . OR exp [ XOR SUB RPAREN OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . XOR exp [ XOR SUB RPAREN OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . IMPLIES exp [ XOR SUB RPAREN OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . EQUIV exp [ XOR SUB RPAREN OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . EQUAL exp [ XOR SUB RPAREN OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . NOTEQUAL exp [ XOR SUB RPAREN OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . LT exp [ XOR SUB RPAREN OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . LE exp [ XOR SUB RPAREN OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . GT exp [ XOR SUB RPAREN OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . GE exp [ XOR SUB RPAREN OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . IN exp [ XOR SUB RPAREN OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
##
## The known suffix of the stack is as follows:
## LPAREN exp 
##

Ill-formed use of $3 statement.



prog: BEGIN FORMULA ATLEAST LPAREN XOR 
##
## Ends in an error in state: 12.
##
## exp -> LPAREN . exp RPAREN [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## LPAREN 
##

Ill-formed 'atleast' statement.
At this point, an expression or variable was expected.
Instead, $0 was read.

prog: BEGIN FORMULA ATLEAST XOR 
##
## Ends in an error in state: 167.
##
## clause -> ATLEAST . exp COMMA exp RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## ATLEAST 
##

Ill-formed 'atleast' statement.
At this point, '(' was expected.
Instead, $0 was read.

prog: BEGIN FORMULA ATMOST XOR 
##
## Ends in an error in state: 162.
##
## clause -> ATMOST . exp COMMA exp RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## ATMOST 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA BIGAND VAR IN VAR COLON VAR WHEN 
##
## Ends in an error in state: 206.
##
## clause -> clause . ADD clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . SUB clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . MUL clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . DIV clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . EQUAL clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . NOTEQUAL clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . LT clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . LE clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . GT clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . GE clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . AND clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . OR clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . XOR clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . IMPLIES clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . EQUIV clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> BIGAND separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) COLON clause . END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## BIGAND separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) COLON clause 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA BIGAND VAR IN VAR COLON XOR 
##
## Ends in an error in state: 205.
##
## clause -> BIGAND separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) COLON . clause END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## BIGAND separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) COLON 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA BIGAND VAR IN VAR RPAREN 
##
## Ends in an error in state: 158.
##
## clause -> BIGAND separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) . COLON clause END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> BIGAND separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) . WHEN exp COLON clause END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## BIGAND separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 90, spurious reduction of production separated_nonempty_list(COMMA,exp) -> exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA BIGAND VAR IN VAR WHEN VAR COLON VAR WHEN 
##
## Ends in an error in state: 173.
##
## clause -> clause . ADD clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . SUB clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . MUL clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . DIV clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . EQUAL clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . NOTEQUAL clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . LT clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . LE clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . GT clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . GE clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . AND clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . OR clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . XOR clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . IMPLIES clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . EQUIV clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> BIGAND separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) WHEN exp COLON clause . END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## BIGAND separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) WHEN exp COLON clause 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA BIGAND VAR IN VAR WHEN VAR COLON XOR 
##
## Ends in an error in state: 161.
##
## clause -> BIGAND separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) WHEN exp COLON . clause END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## BIGAND separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) WHEN exp COLON 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA BIGAND VAR IN VAR WHEN VAR WHEN 
##
## Ends in an error in state: 160.
##
## clause -> BIGAND separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) WHEN exp . COLON clause END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## exp -> exp . ADD exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . SUB exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . MUL exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . DIV exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . MOD exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . AND exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . OR exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . XOR exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . IMPLIES exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . EQUIV exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . EQUAL exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . NOTEQUAL exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . LT exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . LE exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . GT exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . GE exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . IN exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## BIGAND separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) WHEN exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA BIGAND VAR IN VAR WHEN XOR 
##
## Ends in an error in state: 159.
##
## clause -> BIGAND separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) WHEN . exp COLON clause END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## BIGAND separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) WHEN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA BIGAND VAR IN XOR 
##
## Ends in an error in state: 157.
##
## clause -> BIGAND separated_nonempty_list(COMMA,VAR) IN . separated_nonempty_list(COMMA,exp) COLON clause END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> BIGAND separated_nonempty_list(COMMA,VAR) IN . separated_nonempty_list(COMMA,exp) WHEN exp COLON clause END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## BIGAND separated_nonempty_list(COMMA,VAR) IN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA BIGAND XOR 
##
## Ends in an error in state: 155.
##
## clause -> BIGAND . separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) COLON clause END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> BIGAND . separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) WHEN exp COLON clause END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## BIGAND 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA BIGOR VAR IN VAR COLON VAR WHEN 
##
## Ends in an error in state: 211.
##
## clause -> clause . ADD clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . SUB clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . MUL clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . DIV clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . EQUAL clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . NOTEQUAL clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . LT clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . LE clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . GT clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . GE clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . AND clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . OR clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . XOR clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . IMPLIES clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . EQUIV clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> BIGOR separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) COLON clause . END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## BIGOR separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) COLON clause 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA BIGOR VAR IN VAR COLON XOR 
##
## Ends in an error in state: 210.
##
## clause -> BIGOR separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) COLON . clause END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## BIGOR separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) COLON 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA BIGOR VAR IN VAR RPAREN 
##
## Ends in an error in state: 151.
##
## clause -> BIGOR separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) . COLON clause END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> BIGOR separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) . WHEN exp COLON clause END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## BIGOR separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 90, spurious reduction of production separated_nonempty_list(COMMA,exp) -> exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA BIGOR VAR IN VAR WHEN VAR COLON VAR WHEN 
##
## Ends in an error in state: 208.
##
## clause -> clause . ADD clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . SUB clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . MUL clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . DIV clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . EQUAL clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . NOTEQUAL clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . LT clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . LE clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . GT clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . GE clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . AND clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . OR clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . XOR clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . IMPLIES clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . EQUIV clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> BIGOR separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) WHEN exp COLON clause . END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## BIGOR separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) WHEN exp COLON clause 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA BIGOR VAR IN VAR WHEN VAR COLON XOR 
##
## Ends in an error in state: 154.
##
## clause -> BIGOR separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) WHEN exp COLON . clause END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## BIGOR separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) WHEN exp COLON 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA BIGOR VAR IN VAR WHEN VAR WHEN 
##
## Ends in an error in state: 153.
##
## clause -> BIGOR separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) WHEN exp . COLON clause END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## exp -> exp . ADD exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . SUB exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . MUL exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . DIV exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . MOD exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . AND exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . OR exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . XOR exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . IMPLIES exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . EQUIV exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . EQUAL exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . NOTEQUAL exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . LT exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . LE exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . GT exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . GE exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
## exp -> exp . IN exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## BIGOR separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) WHEN exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA BIGOR VAR IN VAR WHEN XOR 
##
## Ends in an error in state: 152.
##
## clause -> BIGOR separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) WHEN . exp COLON clause END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## BIGOR separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) WHEN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA BIGOR VAR IN XOR 
##
## Ends in an error in state: 150.
##
## clause -> BIGOR separated_nonempty_list(COMMA,VAR) IN . separated_nonempty_list(COMMA,exp) COLON clause END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> BIGOR separated_nonempty_list(COMMA,VAR) IN . separated_nonempty_list(COMMA,exp) WHEN exp COLON clause END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## BIGOR separated_nonempty_list(COMMA,VAR) IN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA BIGOR VAR XOR 
##
## Ends in an error in state: 146.
##
## separated_nonempty_list(COMMA,VAR) -> VAR . [ IN ]
## separated_nonempty_list(COMMA,VAR) -> VAR . COMMA separated_nonempty_list(COMMA,VAR) [ IN ]
##
## The known suffix of the stack is as follows:
## VAR 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA BIGOR XOR 
##
## Ends in an error in state: 145.
##
## clause -> BIGOR . separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) COLON clause END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> BIGOR . separated_nonempty_list(COMMA,VAR) IN separated_nonempty_list(COMMA,exp) WHEN exp COLON clause END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## BIGOR 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA EXACT XOR 
##
## Ends in an error in state: 139.
##
## clause -> EXACT . exp COMMA exp RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## EXACT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF CARD XOR 
##
## Ends in an error in state: 24.
##
## exp -> CARD . exp RPAREN [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## CARD 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF DIFF XOR 
##
## Ends in an error in state: 23.
##
## exp -> DIFF . exp COMMA exp RPAREN [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## DIFF 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF EMPTY XOR 
##
## Ends in an error in state: 22.
##
## exp -> EMPTY . exp RPAREN [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## EMPTY 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF IF VAR THEN VAR ELSE VAR WHEN 
##
## Ends in an error in state: 74.
##
## exp -> exp . ADD exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . SUB exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . MUL exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . DIV exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . MOD exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . AND exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . OR exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . XOR exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . IMPLIES exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . EQUIV exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . EQUAL exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . NOTEQUAL exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . LT exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . LE exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . GT exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . GE exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . IN exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> IF exp THEN exp ELSE exp . END [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## IF exp THEN exp ELSE exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF IF VAR THEN VAR ELSE XOR 
##
## Ends in an error in state: 73.
##
## exp -> IF exp THEN exp ELSE . exp END [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## IF exp THEN exp ELSE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF IF VAR THEN VAR WHEN 
##
## Ends in an error in state: 72.
##
## exp -> exp . ADD exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## exp -> exp . SUB exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## exp -> exp . MUL exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## exp -> exp . DIV exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## exp -> exp . MOD exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## exp -> exp . AND exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## exp -> exp . OR exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## exp -> exp . XOR exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## exp -> exp . IMPLIES exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## exp -> exp . EQUIV exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## exp -> exp . EQUAL exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## exp -> exp . NOTEQUAL exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## exp -> exp . LT exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## exp -> exp . LE exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## exp -> exp . GT exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## exp -> exp . GE exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## exp -> exp . IN exp [ XOR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## exp -> IF exp THEN exp . ELSE exp END [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## IF exp THEN exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF IF VAR THEN XOR 
##
## Ends in an error in state: 71.
##
## exp -> IF exp THEN . exp ELSE exp END [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## IF exp THEN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF IF VAR WHEN 
##
## Ends in an error in state: 70.
##
## exp -> exp . ADD exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . SUB exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . MUL exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . DIV exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . MOD exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . AND exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . OR exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . XOR exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . IMPLIES exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . EQUIV exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . EQUAL exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . NOTEQUAL exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . LT exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . LE exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . GT exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . GE exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . IN exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> IF exp . THEN exp ELSE exp END [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## IF exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF IF XOR 
##
## Ends in an error in state: 20.
##
## exp -> IF . exp THEN exp ELSE exp END [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## IF 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF INTER XOR 
##
## Ends in an error in state: 18.
##
## exp -> INTER . exp COMMA exp RPAREN [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## INTER 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF LBRACK TERM RPAREN 
##
## Ends in an error in state: 82.
##
## set_decl -> LBRACK separated_nonempty_list(COMMA,TERM) . RBRACK [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## LBRACK separated_nonempty_list(COMMA,TERM) 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 14, spurious reduction of production separated_nonempty_list(COMMA,TERM) -> TERM 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF LBRACK VAR COMMA BOOL WHEN 
##
## Ends in an error in state: 80.
##
## set_decl -> LBRACK separated_nonempty_list(COMMA,exp) . RBRACK [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## LBRACK separated_nonempty_list(COMMA,exp) 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 90, spurious reduction of production separated_nonempty_list(COMMA,exp) -> exp 
## In state 89, spurious reduction of production separated_nonempty_list(COMMA,exp) -> exp COMMA separated_nonempty_list(COMMA,exp) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF LBRACK VAR RANGE VAR WHEN 
##
## Ends in an error in state: 86.
##
## exp -> exp . ADD exp [ XOR SUB RBRACK OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . SUB exp [ XOR SUB RBRACK OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . MUL exp [ XOR SUB RBRACK OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . DIV exp [ XOR SUB RBRACK OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . MOD exp [ XOR SUB RBRACK OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . AND exp [ XOR SUB RBRACK OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . OR exp [ XOR SUB RBRACK OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . XOR exp [ XOR SUB RBRACK OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . IMPLIES exp [ XOR SUB RBRACK OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . EQUIV exp [ XOR SUB RBRACK OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . EQUAL exp [ XOR SUB RBRACK OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . NOTEQUAL exp [ XOR SUB RBRACK OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . LT exp [ XOR SUB RBRACK OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . LE exp [ XOR SUB RBRACK OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . GT exp [ XOR SUB RBRACK OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . GE exp [ XOR SUB RBRACK OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . IN exp [ XOR SUB RBRACK OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> LBRACK exp RANGE exp . RBRACK [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## LBRACK exp RANGE exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF LBRACK VAR RANGE XOR 
##
## Ends in an error in state: 85.
##
## exp -> LBRACK exp RANGE . exp RBRACK [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## LBRACK exp RANGE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF LBRACK VAR WHEN 
##
## Ends in an error in state: 84.
##
## exp -> exp . ADD exp [ XOR SUB RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COMMA AND ADD ]
## exp -> exp . SUB exp [ XOR SUB RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COMMA AND ADD ]
## exp -> exp . MUL exp [ XOR SUB RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COMMA AND ADD ]
## exp -> exp . DIV exp [ XOR SUB RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COMMA AND ADD ]
## exp -> exp . MOD exp [ XOR SUB RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COMMA AND ADD ]
## exp -> exp . AND exp [ XOR SUB RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COMMA AND ADD ]
## exp -> exp . OR exp [ XOR SUB RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COMMA AND ADD ]
## exp -> exp . XOR exp [ XOR SUB RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COMMA AND ADD ]
## exp -> exp . IMPLIES exp [ XOR SUB RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COMMA AND ADD ]
## exp -> exp . EQUIV exp [ XOR SUB RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COMMA AND ADD ]
## exp -> exp . EQUAL exp [ XOR SUB RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COMMA AND ADD ]
## exp -> exp . NOTEQUAL exp [ XOR SUB RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COMMA AND ADD ]
## exp -> exp . LT exp [ XOR SUB RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COMMA AND ADD ]
## exp -> exp . LE exp [ XOR SUB RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COMMA AND ADD ]
## exp -> exp . GT exp [ XOR SUB RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COMMA AND ADD ]
## exp -> exp . GE exp [ XOR SUB RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COMMA AND ADD ]
## exp -> exp . IN exp [ XOR SUB RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV COMMA AND ADD ]
## exp -> LBRACK exp . RANGE exp RBRACK [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## separated_nonempty_list(COMMA,exp) -> exp . [ RBRACK ]
## separated_nonempty_list(COMMA,exp) -> exp . COMMA separated_nonempty_list(COMMA,exp) [ RBRACK ]
##
## The known suffix of the stack is as follows:
## LBRACK exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF LBRACK XOR 
##
## Ends in an error in state: 13.
##
## exp -> LBRACK . exp RANGE exp RBRACK [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## set_decl -> LBRACK . RBRACK [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## set_decl -> LBRACK . separated_nonempty_list(COMMA,exp) RBRACK [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## set_decl -> LBRACK . separated_nonempty_list(COMMA,TERM) RBRACK [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## LBRACK 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF NOT VAR TOP 
##
## Ends in an error in state: 93.
##
## exp -> exp . ADD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . SUB exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MUL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . DIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MOD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . AND exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . OR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . XOR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IMPLIES exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> NOT exp . [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . NOTEQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IN exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## NOT exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF NOT XOR 
##
## Ends in an error in state: 11.
##
## exp -> NOT . exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## NOT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF SQRT XOR 
##
## Ends in an error in state: 10.
##
## exp -> SQRT . exp RPAREN [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## SQRT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF SUB XOR 
##
## Ends in an error in state: 9.
##
## exp -> SUB . exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## SUB 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF SUBSET XOR 
##
## Ends in an error in state: 8.
##
## exp -> SUBSET . exp COMMA exp RPAREN [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## SUBSET 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF TOFLOAT XOR 
##
## Ends in an error in state: 7.
##
## exp -> TOFLOAT . exp RPAREN [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## TOFLOAT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF TOINT XOR 
##
## Ends in an error in state: 6.
##
## exp -> TOINT . exp RPAREN [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## TOINT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF UNION XOR 
##
## Ends in an error in state: 5.
##
## exp -> UNION . exp COMMA exp RPAREN [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## UNION 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR ADD VAR TOP 
##
## Ends in an error in state: 40.
##
## exp -> exp . ADD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp ADD exp . [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . SUB exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MUL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . DIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MOD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . AND exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . OR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . XOR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IMPLIES exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . NOTEQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IN exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp ADD exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR ADD XOR 
##
## Ends in an error in state: 39.
##
## exp -> exp ADD . exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp ADD 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR AND VAR TOP 
##
## Ends in an error in state: 59.
##
## exp -> exp . ADD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . SUB exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MUL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . DIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MOD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . AND exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp AND exp . [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . OR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . XOR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IMPLIES exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . NOTEQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IN exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp AND exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR AND XOR 
##
## Ends in an error in state: 58.
##
## exp -> exp AND . exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp AND 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR DIV VAR TOP 
##
## Ends in an error in state: 38.
##
## exp -> exp . ADD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . SUB exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MUL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . DIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp DIV exp . [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MOD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . AND exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . OR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . XOR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IMPLIES exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . NOTEQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IN exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp DIV exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR DIV XOR 
##
## Ends in an error in state: 37.
##
## exp -> exp DIV . exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp DIV 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR EQUAL VAR TOP 
##
## Ends in an error in state: 54.
##
## exp -> exp . ADD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . SUB exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MUL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . DIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MOD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . AND exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . OR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . XOR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IMPLIES exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp EQUAL exp . [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . NOTEQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IN exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp EQUAL exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR EQUAL XOR 
##
## Ends in an error in state: 53.
##
## exp -> exp EQUAL . exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp EQUAL 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR EQUIV VAR TOP 
##
## Ends in an error in state: 63.
##
## exp -> exp . ADD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . SUB exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MUL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . DIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MOD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . AND exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . OR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . XOR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IMPLIES exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp EQUIV exp . [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . NOTEQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IN exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp EQUIV exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR EQUIV XOR 
##
## Ends in an error in state: 62.
##
## exp -> exp EQUIV . exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp EQUIV 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR GE VAR TOP 
##
## Ends in an error in state: 52.
##
## exp -> exp . ADD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . SUB exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MUL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . DIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MOD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . AND exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . OR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . XOR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IMPLIES exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . NOTEQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp GE exp . [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IN exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp GE exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR GE XOR 
##
## Ends in an error in state: 51.
##
## exp -> exp GE . exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp GE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR GT VAR TOP 
##
## Ends in an error in state: 50.
##
## exp -> exp . ADD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . SUB exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MUL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . DIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MOD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . AND exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . OR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . XOR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IMPLIES exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . NOTEQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp GT exp . [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IN exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp GT exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR GT XOR 
##
## Ends in an error in state: 49.
##
## exp -> exp GT . exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp GT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR IMPLIES VAR TOP 
##
## Ends in an error in state: 61.
##
## exp -> exp . ADD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . SUB exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MUL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . DIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MOD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . AND exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . OR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . XOR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IMPLIES exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp IMPLIES exp . [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . NOTEQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IN exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp IMPLIES exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR IMPLIES XOR 
##
## Ends in an error in state: 60.
##
## exp -> exp IMPLIES . exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp IMPLIES 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR IN VAR TOP 
##
## Ends in an error in state: 48.
##
## exp -> exp . ADD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . SUB exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MUL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . DIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MOD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . AND exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . OR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . XOR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IMPLIES exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . NOTEQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IN exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp IN exp . [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp IN exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR IN XOR 
##
## Ends in an error in state: 47.
##
## exp -> exp IN . exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp IN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR LE VAR TOP 
##
## Ends in an error in state: 46.
##
## exp -> exp . ADD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . SUB exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MUL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . DIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MOD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . AND exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . OR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . XOR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IMPLIES exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . NOTEQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp LE exp . [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IN exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp LE exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR LE XOR 
##
## Ends in an error in state: 45.
##
## exp -> exp LE . exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp LE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR LT VAR TOP 
##
## Ends in an error in state: 44.
##
## exp -> exp . ADD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . SUB exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MUL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . DIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MOD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . AND exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . OR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . XOR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IMPLIES exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . NOTEQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp LT exp . [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IN exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp LT exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR LT XOR 
##
## Ends in an error in state: 43.
##
## exp -> exp LT . exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp LT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR MOD XOR 
##
## Ends in an error in state: 35.
##
## exp -> exp MOD . exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp MOD 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR MUL VAR TOP 
##
## Ends in an error in state: 34.
##
## exp -> exp . ADD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . SUB exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MUL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp MUL exp . [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . DIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MOD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . AND exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . OR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . XOR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IMPLIES exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . NOTEQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IN exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp MUL exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR MUL XOR 
##
## Ends in an error in state: 33.
##
## exp -> exp MUL . exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp MUL 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR NOTEQUAL VAR TOP 
##
## Ends in an error in state: 42.
##
## exp -> exp . ADD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . SUB exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MUL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . DIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MOD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . AND exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . OR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . XOR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IMPLIES exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . NOTEQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp NOTEQUAL exp . [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IN exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp NOTEQUAL exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR NOTEQUAL XOR 
##
## Ends in an error in state: 41.
##
## exp -> exp NOTEQUAL . exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp NOTEQUAL 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR OR VAR TOP 
##
## Ends in an error in state: 57.
##
## exp -> exp . ADD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . SUB exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MUL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . DIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MOD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . AND exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . OR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp OR exp . [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . XOR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IMPLIES exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . NOTEQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IN exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp OR exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR OR XOR 
##
## Ends in an error in state: 56.
##
## exp -> exp OR . exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp OR 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR SUB VAR TOP 
##
## Ends in an error in state: 32.
##
## exp -> exp . ADD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . SUB exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp SUB exp . [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MUL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . DIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MOD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . AND exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . OR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . XOR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IMPLIES exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . NOTEQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IN exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp SUB exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR SUB XOR 
##
## Ends in an error in state: 31.
##
## exp -> exp SUB . exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp SUB 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR THEN VAR ELSE VAR WHEN 
##
## Ends in an error in state: 215.
##
## clause -> clause . ADD clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . SUB clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . MUL clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . DIV clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . EQUAL clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . NOTEQUAL clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . LT clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . LE clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . GT clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . GE clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . AND clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . OR clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . XOR clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . IMPLIES clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> clause . EQUIV clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## clause -> IF exp THEN clause ELSE clause . END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## IF exp THEN clause ELSE clause 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR THEN VAR ELSE XOR 
##
## Ends in an error in state: 214.
##
## clause -> IF exp THEN clause ELSE . clause END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## IF exp THEN clause ELSE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR THEN VAR WHEN 
##
## Ends in an error in state: 213.
##
## clause -> clause . ADD clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## clause -> clause . SUB clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## clause -> clause . MUL clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## clause -> clause . DIV clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## clause -> clause . EQUAL clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## clause -> clause . NOTEQUAL clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## clause -> clause . LT clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## clause -> clause . LE clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## clause -> clause . GT clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## clause -> clause . GE clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## clause -> clause . AND clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## clause -> clause . OR clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## clause -> clause . XOR clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## clause -> clause . IMPLIES clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## clause -> clause . EQUIV clause [ XOR SUB OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL ELSE DIV AND ADD ]
## clause -> IF exp THEN clause . ELSE clause END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## IF exp THEN clause 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR THEN XOR 
##
## Ends in an error in state: 137.
##
## clause -> IF exp THEN . clause ELSE clause END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## IF exp THEN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR WHEN 
##
## Ends in an error in state: 136.
##
## clause -> IF exp . THEN clause ELSE clause END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## exp -> exp . ADD exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . SUB exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . MUL exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . DIV exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . MOD exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . AND exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . OR exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . XOR exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . IMPLIES exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . EQUIV exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . EQUAL exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . NOTEQUAL exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . LT exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . LE exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . GT exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . GE exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## exp -> exp . IN exp [ XOR THEN SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
##
## The known suffix of the stack is as follows:
## IF exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR XOR VAR TOP 
##
## Ends in an error in state: 30.
##
## exp -> exp . ADD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . SUB exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MUL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . DIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . MOD exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . AND exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . OR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . XOR exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp XOR exp . [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IMPLIES exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUIV exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . EQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . NOTEQUAL exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . LE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GT exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . GE exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
## exp -> exp . IN exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp XOR exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF VAR XOR XOR 
##
## Ends in an error in state: 29.
##
## exp -> exp XOR . exp [ XOR WHEN VARTUPLE VAR THEN SUB RPAREN RBRACK RANGE OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END ELSE DIV COMMA COLON AND ADD ]
##
## The known suffix of the stack is as follows:
## exp XOR 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA IF XOR 
##
## Ends in an error in state: 135.
##
## clause -> IF . exp THEN clause ELSE clause END [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## IF 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA LPAREN XOR 
##
## Ends in an error in state: 133.
##
## clause -> LPAREN . clause RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## LPAREN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA NOT VAR SUB VAR WHEN 
##
## Ends in an error in state: 177.
##
## clause -> clause . ADD clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . SUB clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause SUB clause . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . MUL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . DIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . NOTEQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . AND clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . OR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . XOR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . IMPLIES clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause SUB clause 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA NOT VAR SUB XOR 
##
## Ends in an error in state: 176.
##
## clause -> clause SUB . clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause SUB 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA NOT VAR WHEN 
##
## Ends in an error in state: 219.
##
## clause -> clause . ADD clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . SUB clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . MUL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . DIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . NOTEQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> NOT clause . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . AND clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . OR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . XOR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . IMPLIES clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## NOT clause 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA NOT XOR 
##
## Ends in an error in state: 132.
##
## clause -> NOT . clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## NOT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA SUB XOR 
##
## Ends in an error in state: 131.
##
## clause -> SUB . clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## SUB 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA TERM LPAREN VAR WHEN 
##
## Ends in an error in state: 217.
##
## clause -> LPAREN clause . RPAREN [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . ADD clause [ XOR SUB RPAREN OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## clause -> clause . SUB clause [ XOR SUB RPAREN OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## clause -> clause . MUL clause [ XOR SUB RPAREN OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## clause -> clause . DIV clause [ XOR SUB RPAREN OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## clause -> clause . EQUAL clause [ XOR SUB RPAREN OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## clause -> clause . NOTEQUAL clause [ XOR SUB RPAREN OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## clause -> clause . LT clause [ XOR SUB RPAREN OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## clause -> clause . LE clause [ XOR SUB RPAREN OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## clause -> clause . GT clause [ XOR SUB RPAREN OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## clause -> clause . GE clause [ XOR SUB RPAREN OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## clause -> clause . AND clause [ XOR SUB RPAREN OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## clause -> clause . OR clause [ XOR SUB RPAREN OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## clause -> clause . XOR clause [ XOR SUB RPAREN OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## clause -> clause . IMPLIES clause [ XOR SUB RPAREN OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
## clause -> clause . EQUIV clause [ XOR SUB RPAREN OR NOTEQUAL MUL LT LE IMPLIES GT GE EQUIV EQUAL DIV AND ADD ]
##
## The known suffix of the stack is as follows:
## LPAREN clause 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA TERM WHEN 
##
## Ends in an error in state: 225.
##
## clause -> clause . ADD clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . SUB clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . MUL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . DIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . NOTEQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . AND clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . OR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . XOR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . IMPLIES clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## list(clause) -> clause . list(clause) [ END ]
##
## The known suffix of the stack is as follows:
## clause 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR ADD VAR WHEN 
##
## Ends in an error in state: 183.
##
## clause -> clause . ADD clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause ADD clause . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . SUB clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . MUL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . DIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . NOTEQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . AND clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . OR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . XOR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . IMPLIES clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause ADD clause 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR ADD XOR 
##
## Ends in an error in state: 182.
##
## clause -> clause ADD . clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause ADD 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR AND VAR WHEN 
##
## Ends in an error in state: 199.
##
## clause -> clause . ADD clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . SUB clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . MUL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . DIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . NOTEQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . AND clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause AND clause . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . OR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . XOR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . IMPLIES clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause AND clause 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR AND XOR 
##
## Ends in an error in state: 198.
##
## clause -> clause AND . clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause AND 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR DIV XOR 
##
## Ends in an error in state: 180.
##
## clause -> clause DIV . clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause DIV 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR END FORMULA XOR 
##
## Ends in an error in state: 234.
##
## prog -> BEGIN FORMULA list(clause) END FORMULA . EOF [ # ]
##
## The known suffix of the stack is as follows:
## BEGIN FORMULA list(clause) END FORMULA 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR END XOR 
##
## Ends in an error in state: 233.
##
## prog -> BEGIN FORMULA list(clause) END . FORMULA EOF [ # ]
##
## The known suffix of the stack is as follows:
## BEGIN FORMULA list(clause) END 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR EQUAL VAR WHEN 
##
## Ends in an error in state: 195.
##
## clause -> clause . ADD clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . SUB clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . MUL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . DIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause EQUAL clause . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . NOTEQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . AND clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . OR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . XOR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . IMPLIES clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause EQUAL clause 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR EQUAL XOR 
##
## Ends in an error in state: 194.
##
## clause -> clause EQUAL . clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause EQUAL 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR EQUIV VAR WHEN 
##
## Ends in an error in state: 203.
##
## clause -> clause . ADD clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . SUB clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . MUL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . DIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . NOTEQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . AND clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . OR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . XOR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . IMPLIES clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause EQUIV clause . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause EQUIV clause 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR EQUIV XOR 
##
## Ends in an error in state: 202.
##
## clause -> clause EQUIV . clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause EQUIV 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR GE VAR WHEN 
##
## Ends in an error in state: 193.
##
## clause -> clause . ADD clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . SUB clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . MUL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . DIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . NOTEQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause GE clause . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . AND clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . OR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . XOR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . IMPLIES clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause GE clause 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR GE XOR 
##
## Ends in an error in state: 192.
##
## clause -> clause GE . clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause GE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR GT VAR WHEN 
##
## Ends in an error in state: 191.
##
## clause -> clause . ADD clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . SUB clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . MUL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . DIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . NOTEQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause GT clause . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . AND clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . OR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . XOR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . IMPLIES clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause GT clause 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR GT XOR 
##
## Ends in an error in state: 190.
##
## clause -> clause GT . clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause GT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR IMPLIES VAR WHEN 
##
## Ends in an error in state: 201.
##
## clause -> clause . ADD clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . SUB clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . MUL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . DIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . NOTEQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . AND clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . OR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . XOR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . IMPLIES clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause IMPLIES clause . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause IMPLIES clause 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR IMPLIES XOR 
##
## Ends in an error in state: 200.
##
## clause -> clause IMPLIES . clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause IMPLIES 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR LE VAR WHEN 
##
## Ends in an error in state: 189.
##
## clause -> clause . ADD clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . SUB clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . MUL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . DIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . NOTEQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause LE clause . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . AND clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . OR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . XOR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . IMPLIES clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause LE clause 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR LE XOR 
##
## Ends in an error in state: 188.
##
## clause -> clause LE . clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause LE 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR LT VAR WHEN 
##
## Ends in an error in state: 187.
##
## clause -> clause . ADD clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . SUB clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . MUL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . DIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . NOTEQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause LT clause . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . AND clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . OR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . XOR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . IMPLIES clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause LT clause 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR LT XOR 
##
## Ends in an error in state: 186.
##
## clause -> clause LT . clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause LT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR MUL XOR 
##
## Ends in an error in state: 178.
##
## clause -> clause MUL . clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause MUL 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR NOTEQUAL VAR WHEN 
##
## Ends in an error in state: 185.
##
## clause -> clause . ADD clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . SUB clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . MUL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . DIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . NOTEQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause NOTEQUAL clause . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . AND clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . OR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . XOR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . IMPLIES clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause NOTEQUAL clause 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR NOTEQUAL XOR 
##
## Ends in an error in state: 184.
##
## clause -> clause NOTEQUAL . clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause NOTEQUAL 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR OR VAR WHEN 
##
## Ends in an error in state: 197.
##
## clause -> clause . ADD clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . SUB clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . MUL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . DIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . NOTEQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . AND clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . OR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause OR clause . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . XOR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . IMPLIES clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause OR clause 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR OR XOR 
##
## Ends in an error in state: 196.
##
## clause -> clause OR . clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause OR 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR SUB VAR WHEN 
##
## Ends in an error in state: 227.
##
## clause -> SUB clause . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . ADD clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . SUB clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause SUB clause . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . MUL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . DIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . NOTEQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . AND clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . OR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . XOR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . IMPLIES clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause SUB clause 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR SUB XOR 
##
## Ends in an error in state: 226.
##
## clause -> SUB . clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause SUB . clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause SUB 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR XOR VAR WHEN 
##
## Ends in an error in state: 175.
##
## clause -> clause . ADD clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . SUB clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . MUL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . DIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . NOTEQUAL clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . LE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GT clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . GE clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . AND clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . OR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . XOR clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause XOR clause . [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . IMPLIES clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
## clause -> clause . EQUIV clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause XOR clause 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA VAR XOR XOR 
##
## Ends in an error in state: 174.
##
## clause -> clause XOR . clause [ XOR VARTUPLE VAR TUPLE TOP TERM SUB RPAREN OR NOTEQUAL NOT MUL LT LPAREN LE INT IMPLIES IF GT GE FLOAT EXACT EQUIV EQUAL END ELSE DIV BOTTOM BIGOR BIGAND ATMOST ATLEAST AND ADD ]
##
## The known suffix of the stack is as follows:
## clause XOR 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN FORMULA XOR 
##
## Ends in an error in state: 231.
##
## prog -> BEGIN FORMULA . list(clause) END FORMULA EOF [ # ]
##
## The known suffix of the stack is as follows:
## BEGIN FORMULA 
##

At least one clause is expected.
$0 is not the beginning of a clause.

prog: BEGIN SETS VAR AFFECT BOOL END SETS BEGIN FORMULA VAR END FORMULA XOR 
##
## Ends in an error in state: 223.
##
## prog -> BEGIN SETS list(affect) END SETS BEGIN FORMULA list(clause) END FORMULA . EOF [ # ]
##
## The known suffix of the stack is as follows:
## BEGIN SETS list(affect) END SETS BEGIN FORMULA list(clause) END FORMULA 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN SETS VAR AFFECT BOOL END SETS BEGIN FORMULA VAR END XOR 
##
## Ends in an error in state: 222.
##
## prog -> BEGIN SETS list(affect) END SETS BEGIN FORMULA list(clause) END . FORMULA EOF [ # ]
##
## The known suffix of the stack is as follows:
## BEGIN SETS list(affect) END SETS BEGIN FORMULA list(clause) END 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN SETS VAR AFFECT BOOL END SETS BEGIN FORMULA XOR 
##
## Ends in an error in state: 120.
##
## prog -> BEGIN SETS list(affect) END SETS BEGIN FORMULA . list(clause) END FORMULA EOF [ # ]
##
## The known suffix of the stack is as follows:
## BEGIN SETS list(affect) END SETS BEGIN FORMULA 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN SETS VAR AFFECT BOOL END SETS BEGIN XOR 
##
## Ends in an error in state: 119.
##
## prog -> BEGIN SETS list(affect) END SETS BEGIN . FORMULA list(clause) END FORMULA EOF [ # ]
##
## The known suffix of the stack is as follows:
## BEGIN SETS list(affect) END SETS BEGIN 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN SETS VAR AFFECT BOOL END SETS XOR 
##
## Ends in an error in state: 118.
##
## prog -> BEGIN SETS list(affect) END SETS . BEGIN FORMULA list(clause) END FORMULA EOF [ # ]
##
## The known suffix of the stack is as follows:
## BEGIN SETS list(affect) END SETS 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN SETS VAR AFFECT BOOL END XOR 
##
## Ends in an error in state: 117.
##
## prog -> BEGIN SETS list(affect) END . SETS BEGIN FORMULA list(clause) END FORMULA EOF [ # ]
##
## The known suffix of the stack is as follows:
## BEGIN SETS list(affect) END 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN SETS VAR AFFECT VAR WHEN 
##
## Ends in an error in state: 115.
##
## affect -> var_decl AFFECT exp . [ VARTUPLE VAR END ]
## exp -> exp . ADD exp [ XOR VARTUPLE VAR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . SUB exp [ XOR VARTUPLE VAR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . MUL exp [ XOR VARTUPLE VAR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . DIV exp [ XOR VARTUPLE VAR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . MOD exp [ XOR VARTUPLE VAR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . AND exp [ XOR VARTUPLE VAR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . OR exp [ XOR VARTUPLE VAR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . XOR exp [ XOR VARTUPLE VAR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . IMPLIES exp [ XOR VARTUPLE VAR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . EQUIV exp [ XOR VARTUPLE VAR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . EQUAL exp [ XOR VARTUPLE VAR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . NOTEQUAL exp [ XOR VARTUPLE VAR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . LT exp [ XOR VARTUPLE VAR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . LE exp [ XOR VARTUPLE VAR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . GT exp [ XOR VARTUPLE VAR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . GE exp [ XOR VARTUPLE VAR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
## exp -> exp . IN exp [ XOR VARTUPLE VAR SUB OR NOTEQUAL MUL MOD LT LE IN IMPLIES GT GE EQUIV EQUAL END DIV AND ADD ]
##
## The known suffix of the stack is as follows:
## var_decl AFFECT exp 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN SETS VAR AFFECT XOR 
##
## Ends in an error in state: 114.
##
## affect -> var_decl AFFECT . exp [ VARTUPLE VAR END ]
##
## The known suffix of the stack is as follows:
## var_decl AFFECT 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN SETS VAR XOR 
##
## Ends in an error in state: 113.
##
## affect -> var_decl . AFFECT exp [ VARTUPLE VAR END ]
##
## The known suffix of the stack is as follows:
## var_decl 
##

An affectation sign '=' is expected here.

prog: BEGIN SETS XOR 
##
## Ends in an error in state: 2.
##
## prog -> BEGIN SETS . list(affect) END SETS BEGIN FORMULA list(clause) END FORMULA EOF [ # ]
##
## The known suffix of the stack is as follows:
## BEGIN SETS 
##

An affectation of the form "$var = ..." is expected.

prog: BEGIN XOR 
##
## Ends in an error in state: 1.
##
## prog -> BEGIN . SETS list(affect) END SETS BEGIN FORMULA list(clause) END FORMULA EOF [ # ]
## prog -> BEGIN . FORMULA list(clause) END FORMULA EOF [ # ]
##
## The known suffix of the stack is as follows:
## BEGIN 
##
prog: XOR 
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
## 
##

You must specify (at least) a "formula" bloc,
or a "sets" bloc followed by a "formula" bloc.
Example:
    begin sets    ... end sets
    begin formula ... end formula
