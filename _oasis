# `_oasis` contains the configuration for launching `oasis setup`,
# which creates the ./configure + Makefile for the project.
# Running `oasis setup` is only required when _oasis is modified.
#
# Note that menhirLib is required to be >= 20150118 because the feature
# "incremental API" has been introduced at that version.
###############
# To install oasis:
#     opam install oasis
# To install menhir, fileutils:
#     opam install menhir fileutils minisat
# To install yices2 (which is not yet available using 'opam install yices2'):
#     opam pin add -y yices2 https://github.com/maelvalais/ocamlyices2.git#v0.0.2
###############
# To force using 'bytecode' over 'native' binary for debugging with
# ocamldebug or utop, launch:
#     ./configure --override is_native false
#
###############
# To distribute to OPAM,
# - modify the 'Version:' field; this field will be used for creating
#   the version.ml instead of using 'git describe --tags' because git
#   information is not available in archive tar.gz from github.
# - 1. `oasis setup`
#       `oasis2opam --local -y`
#       `git add setup.ml _oasis opam/opam`
#       `git commit -m "Bump to v2.4.0"`
#    NOTE: these three steps can be done with 'make version VERSION=2.4.0'
# 2. create the tag, for example `git tag -s v2.4.0`
# 3. push all that: `git push --tags`
# 4. run `oasis2opam https://github.com/touist/touist/archive/v2.4.0.tar.gz`
# 5. run `opam-publish submit touist.2.4.0`

OASISFormat:  0.4
OcamlVersion: >= 4.01.0
Name:         touist
Version:      3.0.1
Synopsis:     The solver for the Touist language
Description:  The Touist language is a friendly language for writing
  propositional logic and logic on real and integers (SMT). This language
  aims to formalize real-life problems (e.g., the sudoku can be solved in a
  few lines). Touist embeds the minisat solver (for propositional logic) and
  (coming soon) the SMT2 solver. It can also generate the DIMACS, SMT2 and
  latex formats from you touist file.
  NOTE. yices2 cannot be installed using 'opam install yices2', it is 'pin'
  only. Install it with
  opam pin add -y yices2 https://github.com/maelvalais/ocamlyices2.git#v0.0.2
Maintainers:  Maël Valais <mael.valais@gmail.com>
Authors:      Maël Valais <mael.valais@gmail.com>, Olivier Lezaud
Homepage:     http://touist.github.io
License:      MIT
Plugins:      META (0.4), DevFiles (0.4)
BuildType:    ocamlbuild (0.4)
BuildTools:   ocamlbuild
AlphaFeatures: ocamlbuild_more_args
BetaFeatures: section_object
XOCamlbuildPluginTags: package(cppo_ocamlbuild)

Flag yices2
  Default: false
  Description: enable support for the embeded SMT solver (using yices2)

PreBuildCommand: make pre-build HAS_YICES2=$yices2 VERSION=$pkg_version
PostCleanCommand: make clean-pre-build

XOCamlbuildExtraArgs: -menhir \"menhir --table --inspection -v -la 2 --explain\"

# IMPORTANT: the library name is 'touist', so when calling ocamlc we must add
#     ocamlfind ocamlc -package touist
# but inside of the .ml files that use the functions, you just have to do:
#     open Parse (or Sat, Smt, Eval...)
Library touist
  Path:           src
  Modules:        Parse,Eval,Cnf,Sat,Smt,Pprint,Latex,Msgs,Types
  InternalModules: Lexer,Parser,Parser_error_report
  BuildTools+:    menhir, cppo
  BuildDepends:   menhirLib (>= 20150118), fileutils (>= 0.4.0), str,
                  minisat
# Note: the yices2 dependency is only enabled when --enable-yices2 is given.
# When enabled, the preprocessor macro -D yices2 is passed (see myocamlbuild.ml).

Library touist_yices2
  Build$:        flag(yices2)
  Path:           src
  Modules:        Solvesmt
  BuildDepends:   yices2 (>= 0.0.2)
  FindlibParent:  touist
  FindlibName:    yices2

# Note that the whole process where 'touist_yices' is added as dependency
# when the flag 'yices2' is enabled has been written in myocamlbuild.ml. The
# inspiration comes from the github project Drup/LILiS (see their myocamlbuild.ml)
Executable touist
  CompiledObject: best
  Path:           src
  MainIs:         touist.ml
  BuildDepends:   touist #, touist.yices2

# This produces the test.byte executable; to enable it,
# ./configure --enable-tests
Executable test
  Build$:         flag(tests)
  Install:        false
  Path:           test
  MainIs:         test.ml
  BuildTools+:    touist
  BuildDepends:   touist, oUnit #, touist.yices2

Test test
  Run$: flag(tests)
  Command:          $test
  WorkingDirectory: .
  TestTools: test

Document touist
  Title: API reference for the Touist compiler
  Type: ocamlbuild (0.4)
  Install: false
  InstallDir: $htmldir/api
  BuildTools+: ocamldoc
  XOCamlbuildPath: src
  XOCamlbuildLibraries: touist
  XOCamlbuildExtraArgs: -docflags \"-colorize-code -short-functors -charset utf-8\"
  XOCamlbuildExtraArgs+:-use-menhir -menhir \"menhir --table --inspection -v -la 2\"

SourceRepository master
  Type:           git
  Location:       https://github.com/touist/touist.git
  Browser:        https://github.com/touist/touist
