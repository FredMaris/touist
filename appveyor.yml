#
# MaÃ«l Valais <mael.valais@gmail.com>
#
# This AppVeyor configuration file has been writen to automate
# the building process and make deploying the application easy
# for the platform Windows.
#
# Like with the .travis.yml, this file will be executed
# by the appveyor servers and will build the project.
#
# 1. Why do I download this wodi32.zip instead of installing
#    ocaml-for-windows?
#    Actually it's because I couldn't make work the installer given on
#    protz.github.io/ocaml-installer/. The 64-bits version of the installer
#    doesn't seem to work properly and most importantly it pops up a window
#    that asks something to the user... which is impossible to deal in a CI env.
# 2. What is wodi32.zip and what does it contain?
#    It is a snapshot of the folder when I had wodi installed. Wodi has been
#    discontinued, this is why I had to make a "frozen in time" version.
#    It contains ocaml 4.02.1, fileutils, menhir and oasis.
#
# To allow AppVeyor knowing when things are pushed to the github repo,
# the owner of the repo had to link the repo in the AppVeyor website.
#
# vim:set et sw=2 ts=2:

# Operating system (build VM template)
# It's a x64 VM. There is no way to force it to x86 apparently.
os: Windows Server 2012 

# Scripts that are called at very beginning, before repo cloning
init: git config --global core.autocrlf input

# Clone directory
clone_folder: c:\touist

environment:
  JAVA_HOME: "C:\\Program Files (x86)\\Java\\jdk1.7.0"
  ANT_HOME: C:\ant

# Build cache to preserve files/folders between builds (saves time)
cache:
  - C:\wodi32
  - C:\ant
  - C:\yices

# Scripts that run after cloning repository. "ps:" means windows PowerShell
install:
  - ps: mkdir c:\download
    # This step is a workaround based on a snapshot of wodi (ocaml+cygwin). Because installing ocaml+opam
    # seems (for now) impossible, I chose to upload this wodi32.zip on my dropbox ; it contains everything
    # needed for touist-translator.
  - ps: If(-Not(Test-Path c:\wodi32)){ Invoke-WebRequest "https://dl.dropboxusercontent.com/u/41771140/wodi32.zip" -OutFile c:\download\wodi32.zip }
  - ps: If(-Not(Test-Path c:\wodi32)){ 7z x c:\download\wodi32.zip -oc:\ | Out-Null }
    # I download apache-ant directly from the web because `choco install ant` was re-installing
    # the jdk8 on each build, making them last much more time.
  - ps: If(-Not(Test-Path c:\ant)){Invoke-WebRequest "http://www.us.apache.org/dist/ant/binaries/apache-ant-1.9.6-bin.zip" -OutFile c:\download\ant.zip}
  - ps: If(-Not(Test-Path c:\ant)){ 7z x c:\download\ant.zip -oc:\ | Out-Null; mv c:\apache-ant* c:\ant }
  - ps: $env:Path = $env:Path + ";C:\ant\bin"

# Now we must put the SMT solver into touist-gui/external/
before_build:
  - ps: If(-Not(Test-Path c:\yices)){ Invoke-WebRequest "http://yices.csl.sri.com/cgi-bin/yices2-newnewdownload.cgi?file=yices-2.4.2-i686-pc-mingw32-static-gmp.zip&accept=I+Agree" -OutFile c:\download\yices.zip }
  - ps: If(-Not(Test-Path c:\yices)){ 7z x c:\download\yices.zip -oc:\ | Out-Null; mv c:\yices* c:\yices }
  - ps: cp c:\yices\bin\yices-smt2.exe c:\touist\touist-gui\external
  - ps: cp c:\yices\bin\libyices.dll c:\touist\touist-gui\external
  - ps: ls c:\touist\touist-gui\external
  - ps: ls c:\yices\bin 

build_script:
  # Build touistc (touist-translator)
  # NOTE: I had to add the 2>&1 because when something writes to stderr, 
  # Powershell thinks there was an error...
  - ps: cd c:\wodi32\bin
  - ps: .\bash.exe -l -c 'cd /cygdrive/c/touist/touist-translator && ./configure --bindir ../touist-gui/external 2>&1'
  - ps: .\bash.exe -l -c 'cd /cygdrive/c/touist/touist-translator && make 2>&1'
  - ps: .\bash.exe -l -c 'cd /cygdrive/c/touist/touist-translator && make install 2>&1'
  
  # Build touist.jar (touist-gui)
  - ps: cd c:\touist\touist-gui
  - ps: ant zip
  - ps: $zip=$(Get-ChildItem -name -include touist*.zip) # The artifact's name for later use
  - ps: echo $zip

test: off

# Important: to be able to use the artifact: /touist-.*\.zip/
# in deploy:, it is mandatory to add every .zip or whatever
# in here. 
# The "deploy: artifact: " is actually using what you provided
# here; it actually filters those "path:". If all the ".zip"
# you want to upload have not been given in "path:", the 
# deploy: artifact: thing will do nothing.
artifacts:
  - path: touist-gui\touist-*.zip

skip_tags: false

deploy:
    # Deploy to GitHub Releases
  - provider: GitHub
    auth_token:
      # maelvalais ciphered credetials using appveyor encryption
      secure: "EWLXzbe9BdCFxAyFoz+kUJOZNyLLIpeCcXrl+aisecK9HMin6aAIt3wFaGSqvWPS"
    artifact: /touist-.*\.zip/          # upload all touist*.zip to release 
    #draft: true
    #prerelease: true
    on:
      branch: master                # release from master branch only
      appveyor_repo_tag: true       # deploy on tag push only

# I set the same behaviour as for in .travis.yml: 
# the commiter will only be emailed if his commit failed 
# to build.
notifications:
  - provider: Email
    on_build_success: false
    on_build_failure: true
    on_build_status_changed: false

